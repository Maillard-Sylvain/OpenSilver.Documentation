### YamlMime:ManagedReference
items:
- uid: DotNetForHtml5.Core.TypeFromStringConverters
  commentId: T:DotNetForHtml5.Core.TypeFromStringConverters
  id: TypeFromStringConverters
  parent: DotNetForHtml5.Core
  children:
  - DotNetForHtml5.Core.TypeFromStringConverters.CanTypeBeConverted(System.Type)
  - DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(System.Type,System.String)
  - DotNetForHtml5.Core.TypeFromStringConverters.RegisterConverter(System.Type,System.Func{System.String,System.Object})
  langs:
  - csharp
  - vb
  name: TypeFromStringConverters
  nameWithType: TypeFromStringConverters
  fullName: DotNetForHtml5.Core.TypeFromStringConverters
  type: Class
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/Core/Main/TypeFromStringConverters.cs
    id: TypeFromStringConverters
    path: src/Core/Main/TypeFromStringConverters.cs
    startLine: 39
  assemblies:
  - OpenSilver.Runtime
  namespace: DotNetForHtml5.Core
  summary: "\nA class used to convert elements written as strings in the XAML code into the correct type for the properties setted\n"
  example: []
  syntax:
    content: public static class TypeFromStringConverters
    content.vb: Public Module TypeFromStringConverters
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: DotNetForHtml5.Core.TypeFromStringConverters.CanTypeBeConverted(System.Type)
  commentId: M:DotNetForHtml5.Core.TypeFromStringConverters.CanTypeBeConverted(System.Type)
  id: CanTypeBeConverted(System.Type)
  parent: DotNetForHtml5.Core.TypeFromStringConverters
  langs:
  - csharp
  - vb
  name: CanTypeBeConverted(Type)
  nameWithType: TypeFromStringConverters.CanTypeBeConverted(Type)
  fullName: DotNetForHtml5.Core.TypeFromStringConverters.CanTypeBeConverted(System.Type)
  type: Method
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/Core/Main/TypeFromStringConverters.cs
    id: CanTypeBeConverted
    path: src/Core/Main/TypeFromStringConverters.cs
    startLine: 68
  assemblies:
  - OpenSilver.Runtime
  namespace: DotNetForHtml5.Core
  summary: "\nChecks if it is possible to convert from string to a given type.\n"
  example: []
  syntax:
    content: public static bool CanTypeBeConverted(Type type)
    parameters:
    - id: type
      type: System.Type
      description: Type to lookup.
    return:
      type: System.Boolean
      description: True if a converter exists, false otherwise.
    content.vb: Public Shared Function CanTypeBeConverted(type As Type) As Boolean
  overload: DotNetForHtml5.Core.TypeFromStringConverters.CanTypeBeConverted*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotNetForHtml5.Core.TypeFromStringConverters.RegisterConverter(System.Type,System.Func{System.String,System.Object})
  commentId: M:DotNetForHtml5.Core.TypeFromStringConverters.RegisterConverter(System.Type,System.Func{System.String,System.Object})
  id: RegisterConverter(System.Type,System.Func{System.String,System.Object})
  parent: DotNetForHtml5.Core.TypeFromStringConverters
  langs:
  - csharp
  - vb
  name: RegisterConverter(Type, Func<String, Object>)
  nameWithType: TypeFromStringConverters.RegisterConverter(Type, Func<String, Object>)
  fullName: DotNetForHtml5.Core.TypeFromStringConverters.RegisterConverter(System.Type, System.Func<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/Core/Main/TypeFromStringConverters.cs
    id: RegisterConverter
    path: src/Core/Main/TypeFromStringConverters.cs
    startLine: 79
  assemblies:
  - OpenSilver.Runtime
  namespace: DotNetForHtml5.Core
  summary: "\nRegisters a type and its associated method to convert it from a string. This method takes part in allowing the definition of an object of the said type directly in the xaml.\n"
  example: []
  syntax:
    content: public static void RegisterConverter(Type type, Func<string, object> converter)
    parameters:
    - id: type
      type: System.Type
      description: The type for which a converter will be defined
    - id: converter
      type: System.Func{System.String,System.Object}
      description: The method that will convert the XAML string into an instance of the type.
    content.vb: Public Shared Sub RegisterConverter(type As Type, converter As Func(Of String, Object))
  overload: DotNetForHtml5.Core.TypeFromStringConverters.RegisterConverter*
  nameWithType.vb: TypeFromStringConverters.RegisterConverter(Type, Func(Of String, Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DotNetForHtml5.Core.TypeFromStringConverters.RegisterConverter(System.Type, System.Func(Of System.String, System.Object))
  name.vb: RegisterConverter(Type, Func(Of String, Object))
- uid: DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(System.Type,System.String)
  commentId: M:DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(System.Type,System.String)
  id: ConvertFromInvariantString(System.Type,System.String)
  parent: DotNetForHtml5.Core.TypeFromStringConverters
  langs:
  - csharp
  - vb
  name: ConvertFromInvariantString(Type, String)
  nameWithType: TypeFromStringConverters.ConvertFromInvariantString(Type, String)
  fullName: DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(System.Type, System.String)
  type: Method
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/Core/Main/TypeFromStringConverters.cs
    id: ConvertFromInvariantString
    path: src/Core/Main/TypeFromStringConverters.cs
    startLine: 91
  assemblies:
  - OpenSilver.Runtime
  namespace: DotNetForHtml5.Core
  summary: "\nConverts the given string into the specified Type using the registered converter for the Type.\n"
  example: []
  syntax:
    content: public static object ConvertFromInvariantString(Type type, string s)
    parameters:
    - id: type
      type: System.Type
      description: The Type to which the conversion method is registered.
    - id: s
      type: System.String
      description: The string to convert.
    return:
      type: System.Object
      description: The instance of the specified type converted from the string.
    content.vb: Public Shared Function ConvertFromInvariantString(type As Type, s As String) As Object
  overload: DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: DotNetForHtml5.Core
  commentId: N:DotNetForHtml5.Core
  name: DotNetForHtml5.Core
  nameWithType: DotNetForHtml5.Core
  fullName: DotNetForHtml5.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: DotNetForHtml5.Core.TypeFromStringConverters.CanTypeBeConverted*
  commentId: Overload:DotNetForHtml5.Core.TypeFromStringConverters.CanTypeBeConverted
  name: CanTypeBeConverted
  nameWithType: TypeFromStringConverters.CanTypeBeConverted
  fullName: DotNetForHtml5.Core.TypeFromStringConverters.CanTypeBeConverted
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: DotNetForHtml5.Core.TypeFromStringConverters.RegisterConverter*
  commentId: Overload:DotNetForHtml5.Core.TypeFromStringConverters.RegisterConverter
  name: RegisterConverter
  nameWithType: TypeFromStringConverters.RegisterConverter
  fullName: DotNetForHtml5.Core.TypeFromStringConverters.RegisterConverter
- uid: System.Func{System.String,System.Object}
  commentId: T:System.Func{System.String,System.Object}
  parent: System
  definition: System.Func`2
  name: Func<String, Object>
  nameWithType: Func<String, Object>
  fullName: System.Func<System.String, System.Object>
  nameWithType.vb: Func(Of String, Object)
  fullName.vb: System.Func(Of System.String, System.Object)
  name.vb: Func(Of String, Object)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString*
  commentId: Overload:DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString
  name: ConvertFromInvariantString
  nameWithType: TypeFromStringConverters.ConvertFromInvariantString
  fullName: DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
