### YamlMime:ManagedReference
items:
- uid: System.Xml.Linq.XName
  commentId: T:System.Xml.Linq.XName
  id: XName
  parent: System.Xml.Linq
  children:
  - System.Xml.Linq.XName.Equals(System.Object)
  - System.Xml.Linq.XName.Equals(System.Xml.Linq.XName)
  - System.Xml.Linq.XName.LocalName
  - System.Xml.Linq.XName.Namespace
  - System.Xml.Linq.XName.NamespaceName
  - System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)
  - System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName
  - System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)
  - System.Xml.Linq.XName.ToString
  langs:
  - csharp
  - vb
  name: XName
  nameWithType: XName
  fullName: System.Xml.Linq.XName
  type: Class
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/System.Xml.Linq/XName.cs
    id: XName
    path: src/System.Xml.Linq/XName.cs
    startLine: 29
  assemblies:
  - OpenSilver.Runtime
  namespace: System.Xml.Linq
  summary: "\nRepresents a name of an XML element or attribute.\n"
  example: []
  syntax:
    content: 'public sealed class XName : IEquatable<XName>'
    content.vb: >-
      Public NotInheritable Class XName

          Implements IEquatable(Of XName)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{System.Xml.Linq.XName}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Xml.Linq.XName.Equals(System.Object)
  commentId: M:System.Xml.Linq.XName.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Xml.Linq.XName
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: XName.Equals(Object)
  fullName: System.Xml.Linq.XName.Equals(System.Object)
  type: Method
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/System.Xml.Linq/XName.cs
    id: Equals
    path: src/System.Xml.Linq/XName.cs
    startLine: 39
  assemblies:
  - OpenSilver.Runtime
  namespace: System.Xml.Linq
  summary: "\nDetermines whether the specified System.Xml.Linq.XName is equal to this System.Xml.Linq.XName.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The System.Xml.Linq.XName to compare to the current System.Xml.Linq.XName.
    return:
      type: System.Boolean
      description: "\ntrue if the specified System.Xml.Linq.XName is equal to the current System.Xml.Linq.XName;\notherwise false.\n"
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: System.Xml.Linq.XName.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Xml.Linq.XName.Equals(System.Xml.Linq.XName)
  commentId: M:System.Xml.Linq.XName.Equals(System.Xml.Linq.XName)
  id: Equals(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XName
  langs:
  - csharp
  - vb
  name: Equals(XName)
  nameWithType: XName.Equals(XName)
  fullName: System.Xml.Linq.XName.Equals(System.Xml.Linq.XName)
  type: Method
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/System.Xml.Linq/XName.cs
    id: Equals
    path: src/System.Xml.Linq/XName.cs
    startLine: 50
  assemblies:
  - OpenSilver.Runtime
  namespace: System.Xml.Linq
  syntax:
    content: public bool Equals(XName other)
    parameters:
    - id: other
      type: System.Xml.Linq.XName
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As XName) As Boolean
  overload: System.Xml.Linq.XName.Equals*
  implements:
  - System.IEquatable{System.Xml.Linq.XName}.Equals(System.Xml.Linq.XName)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XName.LocalName
  commentId: P:System.Xml.Linq.XName.LocalName
  id: LocalName
  parent: System.Xml.Linq.XName
  langs:
  - csharp
  - vb
  name: LocalName
  nameWithType: XName.LocalName
  fullName: System.Xml.Linq.XName.LocalName
  type: Property
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/System.Xml.Linq/XName.cs
    id: LocalName
    path: src/System.Xml.Linq/XName.cs
    startLine: 59
  assemblies:
  - OpenSilver.Runtime
  namespace: System.Xml.Linq
  summary: "\nGets the local (unqualified) part of the name.\n"
  example: []
  syntax:
    content: public string LocalName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property LocalName As String
  overload: System.Xml.Linq.XName.LocalName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Xml.Linq.XName.Namespace
  commentId: P:System.Xml.Linq.XName.Namespace
  id: Namespace
  parent: System.Xml.Linq.XName
  langs:
  - csharp
  - vb
  name: Namespace
  nameWithType: XName.Namespace
  fullName: System.Xml.Linq.XName.Namespace
  type: Property
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/System.Xml.Linq/XName.cs
    id: Namespace
    path: src/System.Xml.Linq/XName.cs
    startLine: 69
  assemblies:
  - OpenSilver.Runtime
  namespace: System.Xml.Linq
  summary: "\nGets the namespace part of the fully qualified name.\n"
  example: []
  syntax:
    content: public XNamespace Namespace { get; }
    parameters: []
    return:
      type: System.Xml.Linq.XNamespace
    content.vb: Public ReadOnly Property Namespace As XNamespace
  overload: System.Xml.Linq.XName.Namespace*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Xml.Linq.XName.NamespaceName
  commentId: P:System.Xml.Linq.XName.NamespaceName
  id: NamespaceName
  parent: System.Xml.Linq.XName
  langs:
  - csharp
  - vb
  name: NamespaceName
  nameWithType: XName.NamespaceName
  fullName: System.Xml.Linq.XName.NamespaceName
  type: Property
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/System.Xml.Linq/XName.cs
    id: NamespaceName
    path: src/System.Xml.Linq/XName.cs
    startLine: 85
  assemblies:
  - OpenSilver.Runtime
  namespace: System.Xml.Linq
  summary: "\nReturns the URI of the System.Xml.Linq.XNamespace for this System.Xml.Linq.XName.\n"
  example: []
  syntax:
    content: public string NamespaceName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property NamespaceName As String
  overload: System.Xml.Linq.XName.NamespaceName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName
  commentId: M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName
  id: op_Implicit(System.String)~System.Xml.Linq.XName
  parent: System.Xml.Linq.XName
  langs:
  - csharp
  - vb
  name: Implicit(String to XName)
  nameWithType: XName.Implicit(String to XName)
  fullName: System.Xml.Linq.XName.Implicit(System.String to System.Xml.Linq.XName)
  type: Operator
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/System.Xml.Linq/XName.cs
    id: op_Implicit
    path: src/System.Xml.Linq/XName.cs
    startLine: 103
  assemblies:
  - OpenSilver.Runtime
  namespace: System.Xml.Linq
  summary: "\nConverts a string formatted as an expanded XML name (that is,{namespace}localname)\nto an System.Xml.Linq.XName object.\n"
  example: []
  syntax:
    content: public static implicit operator XName(string expandedName)
    parameters:
    - id: expandedName
      type: System.String
      description: A string that contains an expanded XML name in the format {namespace}localname.
    return:
      type: System.Xml.Linq.XName
      description: An System.Xml.Linq.XName object constructed from the expanded name.
    content.vb: Public Shared Widening Operator CType(expandedName As String) As XName
  overload: System.Xml.Linq.XName.op_Implicit*
  nameWithType.vb: XName.Widening(String to XName)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XName.Widening(System.String to System.Xml.Linq.XName)
  name.vb: Widening(String to XName)
- uid: System.Xml.Linq.XName.ToString
  commentId: M:System.Xml.Linq.XName.ToString
  id: ToString
  parent: System.Xml.Linq.XName
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: XName.ToString()
  fullName: System.Xml.Linq.XName.ToString()
  type: Method
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/System.Xml.Linq/XName.cs
    id: ToString
    path: src/System.Xml.Linq/XName.cs
    startLine: 125
  assemblies:
  - OpenSilver.Runtime
  namespace: System.Xml.Linq
  summary: "\nReturns the expanded XML name in the format {namespace}localname.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A System.String that contains the expanded XML name in the format {namespace}localname.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: System.Xml.Linq.XName.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)
  commentId: M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)
  id: op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)
  parent: System.Xml.Linq.XName
  langs:
  - csharp
  - vb
  name: Inequality(XName, XName)
  nameWithType: XName.Inequality(XName, XName)
  fullName: System.Xml.Linq.XName.Inequality(System.Xml.Linq.XName, System.Xml.Linq.XName)
  type: Operator
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/System.Xml.Linq/XName.cs
    id: op_Inequality
    path: src/System.Xml.Linq/XName.cs
    startLine: 143
  assemblies:
  - OpenSilver.Runtime
  namespace: System.Xml.Linq
  summary: "\nReturns a value indicating whether two instances of System.Xml.Linq.XName\nare not equal.\n"
  example: []
  syntax:
    content: public static bool operator !=(XName left, XName right)
    parameters:
    - id: left
      type: System.Xml.Linq.XName
      description: The first System.Xml.Linq.XName to compare.
    - id: right
      type: System.Xml.Linq.XName
      description: The second System.Xml.Linq.XName to compare.
    return:
      type: System.Boolean
      description: true if left and right are not equal; otherwise false.
    content.vb: Public Shared Operator <>(left As XName, right As XName) As Boolean
  overload: System.Xml.Linq.XName.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)
  commentId: M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)
  id: op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)
  parent: System.Xml.Linq.XName
  langs:
  - csharp
  - vb
  name: Equality(XName, XName)
  nameWithType: XName.Equality(XName, XName)
  fullName: System.Xml.Linq.XName.Equality(System.Xml.Linq.XName, System.Xml.Linq.XName)
  type: Operator
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/System.Xml.Linq/XName.cs
    id: op_Equality
    path: src/System.Xml.Linq/XName.cs
    startLine: 173
  assemblies:
  - OpenSilver.Runtime
  namespace: System.Xml.Linq
  summary: "\nReturns a value indicating whether two instances of System.Xml.Linq.XName\nare equal.\n"
  example: []
  syntax:
    content: public static bool operator ==(XName left, XName right)
    parameters:
    - id: left
      type: System.Xml.Linq.XName
      description: The first System.Xml.Linq.XName to compare.
    - id: right
      type: System.Xml.Linq.XName
      description: The second System.Xml.Linq.XName to compare.
    return:
      type: System.Boolean
      description: true if left and right are equal; otherwise false.
    content.vb: Public Shared Operator =(left As XName, right As XName) As Boolean
  overload: System.Xml.Linq.XName.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Xml.Linq
  commentId: N:System.Xml.Linq
  name: System.Xml.Linq
  nameWithType: System.Xml.Linq
  fullName: System.Xml.Linq
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{System.Xml.Linq.XName}
  commentId: T:System.IEquatable{System.Xml.Linq.XName}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<XName>
  nameWithType: IEquatable<XName>
  fullName: System.IEquatable<System.Xml.Linq.XName>
  nameWithType.vb: IEquatable(Of XName)
  fullName.vb: System.IEquatable(Of System.Xml.Linq.XName)
  name.vb: IEquatable(Of XName)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xml.Linq.XName
    name: XName
    nameWithType: XName
    fullName: System.Xml.Linq.XName
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Xml.Linq.XName
    name: XName
    nameWithType: XName
    fullName: System.Xml.Linq.XName
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Linq.XName.Equals*
  commentId: Overload:System.Xml.Linq.XName.Equals
  name: Equals
  nameWithType: XName.Equals
  fullName: System.Xml.Linq.XName.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable{System.Xml.Linq.XName}.Equals(System.Xml.Linq.XName)
  commentId: M:System.IEquatable{System.Xml.Linq.XName}.Equals(System.Xml.Linq.XName)
  parent: System.IEquatable{System.Xml.Linq.XName}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(XName)
  nameWithType: IEquatable<XName>.Equals(XName)
  fullName: System.IEquatable<System.Xml.Linq.XName>.Equals(System.Xml.Linq.XName)
  nameWithType.vb: IEquatable(Of XName).Equals(XName)
  fullName.vb: System.IEquatable(Of System.Xml.Linq.XName).Equals(System.Xml.Linq.XName)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<XName>.Equals
    fullName: System.IEquatable<System.Xml.Linq.XName>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XName
    name: XName
    nameWithType: XName
    fullName: System.Xml.Linq.XName
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of XName).Equals
    fullName: System.IEquatable(Of System.Xml.Linq.XName).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XName
    name: XName
    nameWithType: XName
    fullName: System.Xml.Linq.XName
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Linq.XName
  commentId: T:System.Xml.Linq.XName
  parent: System.Xml.Linq
  name: XName
  nameWithType: XName
  fullName: System.Xml.Linq.XName
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Linq.XName.LocalName*
  commentId: Overload:System.Xml.Linq.XName.LocalName
  name: LocalName
  nameWithType: XName.LocalName
  fullName: System.Xml.Linq.XName.LocalName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.Linq.XName.Namespace*
  commentId: Overload:System.Xml.Linq.XName.Namespace
  name: Namespace
  nameWithType: XName.Namespace
  fullName: System.Xml.Linq.XName.Namespace
- uid: System.Xml.Linq.XNamespace
  commentId: T:System.Xml.Linq.XNamespace
  parent: System.Xml.Linq
  name: XNamespace
  nameWithType: XNamespace
  fullName: System.Xml.Linq.XNamespace
- uid: System.Xml.Linq.XName.NamespaceName*
  commentId: Overload:System.Xml.Linq.XName.NamespaceName
  name: NamespaceName
  nameWithType: XName.NamespaceName
  fullName: System.Xml.Linq.XName.NamespaceName
- uid: System.Xml.Linq.XName.op_Implicit*
  commentId: Overload:System.Xml.Linq.XName.op_Implicit
  name: Implicit
  nameWithType: XName.Implicit
  fullName: System.Xml.Linq.XName.Implicit
  nameWithType.vb: XName.Widening
  fullName.vb: System.Xml.Linq.XName.Widening
  name.vb: Widening
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Linq.XName.ToString*
  commentId: Overload:System.Xml.Linq.XName.ToString
  name: ToString
  nameWithType: XName.ToString
  fullName: System.Xml.Linq.XName.ToString
- uid: System.Xml.Linq.XName.op_Inequality*
  commentId: Overload:System.Xml.Linq.XName.op_Inequality
  name: Inequality
  nameWithType: XName.Inequality
  fullName: System.Xml.Linq.XName.Inequality
- uid: System.Xml.Linq.XName.op_Equality*
  commentId: Overload:System.Xml.Linq.XName.op_Equality
  name: Equality
  nameWithType: XName.Equality
  fullName: System.Xml.Linq.XName.Equality
