### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlQualifiedName
  commentId: T:System.Xml.XmlQualifiedName
  id: XmlQualifiedName
  parent: System.Xml
  children:
  - System.Xml.XmlQualifiedName.#ctor
  - System.Xml.XmlQualifiedName.#ctor(System.String)
  - System.Xml.XmlQualifiedName.#ctor(System.String,System.String)
  - System.Xml.XmlQualifiedName.Empty
  - System.Xml.XmlQualifiedName.Equals(System.Object)
  - System.Xml.XmlQualifiedName.GetHashCode
  - System.Xml.XmlQualifiedName.IsEmpty
  - System.Xml.XmlQualifiedName.Name
  - System.Xml.XmlQualifiedName.Namespace
  - System.Xml.XmlQualifiedName.op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)
  - System.Xml.XmlQualifiedName.op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)
  - System.Xml.XmlQualifiedName.ToString
  - System.Xml.XmlQualifiedName.ToString(System.String,System.String)
  langs:
  - csharp
  - vb
  name: XmlQualifiedName
  nameWithType: XmlQualifiedName
  fullName: System.Xml.XmlQualifiedName
  type: Class
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/System.Xml/XmlQualifiedName.cs
    id: XmlQualifiedName
    path: src/System.Xml/XmlQualifiedName.cs
    startLine: 26
  assemblies:
  - CSHTML5.Runtime
  namespace: System.Xml
  summary: "\nRepresents an XML qualified name.\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public class XmlQualifiedName
    content.vb: >-
      <Serializable>

      Public Class XmlQualifiedName
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Xml.XmlQualifiedName.Empty
  commentId: F:System.Xml.XmlQualifiedName.Empty
  id: Empty
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: XmlQualifiedName.Empty
  fullName: System.Xml.XmlQualifiedName.Empty
  type: Field
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/System.Xml/XmlQualifiedName.cs
    id: Empty
    path: src/System.Xml/XmlQualifiedName.cs
    startLine: 35
  assemblies:
  - CSHTML5.Runtime
  namespace: System.Xml
  summary: "\nProvides an empty System.Xml.XmlQualifiedName.\n"
  example: []
  syntax:
    content: public static readonly XmlQualifiedName Empty
    return:
      type: System.Xml.XmlQualifiedName
    content.vb: Public Shared ReadOnly Empty As XmlQualifiedName
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Xml.XmlQualifiedName.#ctor
  commentId: M:System.Xml.XmlQualifiedName.#ctor
  id: '#ctor'
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: XmlQualifiedName()
  nameWithType: XmlQualifiedName.XmlQualifiedName()
  fullName: System.Xml.XmlQualifiedName.XmlQualifiedName()
  type: Constructor
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/System.Xml/XmlQualifiedName.cs
    id: .ctor
    path: src/System.Xml/XmlQualifiedName.cs
    startLine: 40
  assemblies:
  - CSHTML5.Runtime
  namespace: System.Xml
  summary: "\nInitializes a new instance of the System.Xml.XmlQualifiedName class.\n"
  example: []
  syntax:
    content: public XmlQualifiedName()
    content.vb: Public Sub New
  overload: System.Xml.XmlQualifiedName.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlQualifiedName.#ctor(System.String)
  commentId: M:System.Xml.XmlQualifiedName.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: XmlQualifiedName(String)
  nameWithType: XmlQualifiedName.XmlQualifiedName(String)
  fullName: System.Xml.XmlQualifiedName.XmlQualifiedName(System.String)
  type: Constructor
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/System.Xml/XmlQualifiedName.cs
    id: .ctor
    path: src/System.Xml/XmlQualifiedName.cs
    startLine: 50
  assemblies:
  - CSHTML5.Runtime
  namespace: System.Xml
  summary: "\nInitializes a new instance of the System.Xml.XmlQualifiedName class with\nthe specified name.\n"
  example: []
  syntax:
    content: public XmlQualifiedName(string name)
    parameters:
    - id: name
      type: System.String
      description: The local name to use as the name of the System.Xml.XmlQualifiedName object.
    content.vb: Public Sub New(name As String)
  overload: System.Xml.XmlQualifiedName.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlQualifiedName.#ctor(System.String,System.String)
  commentId: M:System.Xml.XmlQualifiedName.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: XmlQualifiedName(String, String)
  nameWithType: XmlQualifiedName.XmlQualifiedName(String, String)
  fullName: System.Xml.XmlQualifiedName.XmlQualifiedName(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/System.Xml/XmlQualifiedName.cs
    id: .ctor
    path: src/System.Xml/XmlQualifiedName.cs
    startLine: 61
  assemblies:
  - CSHTML5.Runtime
  namespace: System.Xml
  summary: "\nInitializes a new instance of the System.Xml.XmlQualifiedName class with\nthe specified name and namespace.\n"
  example: []
  syntax:
    content: public XmlQualifiedName(string name, string ns)
    parameters:
    - id: name
      type: System.String
      description: The local name to use as the name of the System.Xml.XmlQualifiedName object.
    - id: ns
      type: System.String
      description: The namespace for the System.Xml.XmlQualifiedName object.
    content.vb: Public Sub New(name As String, ns As String)
  overload: System.Xml.XmlQualifiedName.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlQualifiedName.op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)
  commentId: M:System.Xml.XmlQualifiedName.op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)
  id: op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: Inequality(XmlQualifiedName, XmlQualifiedName)
  nameWithType: XmlQualifiedName.Inequality(XmlQualifiedName, XmlQualifiedName)
  fullName: System.Xml.XmlQualifiedName.Inequality(System.Xml.XmlQualifiedName, System.Xml.XmlQualifiedName)
  type: Operator
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/System.Xml/XmlQualifiedName.cs
    id: op_Inequality
    path: src/System.Xml/XmlQualifiedName.cs
    startLine: 76
  assemblies:
  - CSHTML5.Runtime
  namespace: System.Xml
  summary: "\nCompares two System.Xml.XmlQualifiedName objects.\n"
  example: []
  syntax:
    content: public static bool operator !=(XmlQualifiedName a, XmlQualifiedName b)
    parameters:
    - id: a
      type: System.Xml.XmlQualifiedName
      description: An System.Xml.XmlQualifiedName to compare.
    - id: b
      type: System.Xml.XmlQualifiedName
      description: An System.Xml.XmlQualifiedName to compare.
    return:
      type: System.Boolean
      description: "\ntrue if the name and namespace values for the two objects differ; otherwise,\nfalse.\n"
    content.vb: Public Shared Operator <>(a As XmlQualifiedName, b As XmlQualifiedName) As Boolean
  overload: System.Xml.XmlQualifiedName.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlQualifiedName.op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)
  commentId: M:System.Xml.XmlQualifiedName.op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)
  id: op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: Equality(XmlQualifiedName, XmlQualifiedName)
  nameWithType: XmlQualifiedName.Equality(XmlQualifiedName, XmlQualifiedName)
  fullName: System.Xml.XmlQualifiedName.Equality(System.Xml.XmlQualifiedName, System.Xml.XmlQualifiedName)
  type: Operator
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/System.Xml/XmlQualifiedName.cs
    id: op_Equality
    path: src/System.Xml/XmlQualifiedName.cs
    startLine: 90
  assemblies:
  - CSHTML5.Runtime
  namespace: System.Xml
  summary: "\nCompares two System.Xml.XmlQualifiedName objects.\n"
  example: []
  syntax:
    content: public static bool operator ==(XmlQualifiedName a, XmlQualifiedName b)
    parameters:
    - id: a
      type: System.Xml.XmlQualifiedName
      description: An System.Xml.XmlQualifiedName to compare.
    - id: b
      type: System.Xml.XmlQualifiedName
      description: An System.Xml.XmlQualifiedName to compare.
    return:
      type: System.Boolean
      description: "\ntrue if the two objects have the same name and namespace values; otherwise,\nfalse.\n"
    content.vb: Public Shared Operator =(a As XmlQualifiedName, b As XmlQualifiedName) As Boolean
  overload: System.Xml.XmlQualifiedName.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlQualifiedName.IsEmpty
  commentId: P:System.Xml.XmlQualifiedName.IsEmpty
  id: IsEmpty
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: XmlQualifiedName.IsEmpty
  fullName: System.Xml.XmlQualifiedName.IsEmpty
  type: Property
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/System.Xml/XmlQualifiedName.cs
    id: IsEmpty
    path: src/System.Xml/XmlQualifiedName.cs
    startLine: 98
  assemblies:
  - CSHTML5.Runtime
  namespace: System.Xml
  summary: "\nGets a value indicating whether the System.Xml.XmlQualifiedName is empty.\n"
  example: []
  syntax:
    content: public bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEmpty As Boolean
  overload: System.Xml.XmlQualifiedName.IsEmpty*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Xml.XmlQualifiedName.Name
  commentId: P:System.Xml.XmlQualifiedName.Name
  id: Name
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: XmlQualifiedName.Name
  fullName: System.Xml.XmlQualifiedName.Name
  type: Property
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/System.Xml/XmlQualifiedName.cs
    id: Name
    path: src/System.Xml/XmlQualifiedName.cs
    startLine: 109
  assemblies:
  - CSHTML5.Runtime
  namespace: System.Xml
  summary: "\nGets a string representation of the qualified name of the System.Xml.XmlQualifiedName.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: System.Xml.XmlQualifiedName.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Xml.XmlQualifiedName.Namespace
  commentId: P:System.Xml.XmlQualifiedName.Namespace
  id: Namespace
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: Namespace
  nameWithType: XmlQualifiedName.Namespace
  fullName: System.Xml.XmlQualifiedName.Namespace
  type: Property
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/System.Xml/XmlQualifiedName.cs
    id: Namespace
    path: src/System.Xml/XmlQualifiedName.cs
    startLine: 120
  assemblies:
  - CSHTML5.Runtime
  namespace: System.Xml
  summary: "\nGets a string representation of the namespace of the System.Xml.XmlQualifiedName.\n"
  example: []
  syntax:
    content: public string Namespace { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Namespace As String
  overload: System.Xml.XmlQualifiedName.Namespace*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Xml.XmlQualifiedName.Equals(System.Object)
  commentId: M:System.Xml.XmlQualifiedName.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: XmlQualifiedName.Equals(Object)
  fullName: System.Xml.XmlQualifiedName.Equals(System.Object)
  type: Method
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/System.Xml/XmlQualifiedName.cs
    id: Equals
    path: src/System.Xml/XmlQualifiedName.cs
    startLine: 134
  assemblies:
  - CSHTML5.Runtime
  namespace: System.Xml
  summary: "\nDetermines whether the specified System.Xml.XmlQualifiedName object is equal\nto the current System.Xml.XmlQualifiedName object.\n"
  example: []
  syntax:
    content: public override bool Equals(object other)
    parameters:
    - id: other
      type: System.Object
      description: The System.Xml.XmlQualifiedName to compare.
    return:
      type: System.Boolean
      description: true if the two are the same instance object; otherwise, false.
    content.vb: Public Overrides Function Equals(other As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: System.Xml.XmlQualifiedName.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Xml.XmlQualifiedName.GetHashCode
  commentId: M:System.Xml.XmlQualifiedName.GetHashCode
  id: GetHashCode
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: XmlQualifiedName.GetHashCode()
  fullName: System.Xml.XmlQualifiedName.GetHashCode()
  type: Method
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/System.Xml/XmlQualifiedName.cs
    id: GetHashCode
    path: src/System.Xml/XmlQualifiedName.cs
    startLine: 143
  assemblies:
  - CSHTML5.Runtime
  namespace: System.Xml
  summary: "\nReturns the hash code for the System.Xml.XmlQualifiedName.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A hash code for this object.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: System.Xml.XmlQualifiedName.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Xml.XmlQualifiedName.ToString
  commentId: M:System.Xml.XmlQualifiedName.ToString
  id: ToString
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: XmlQualifiedName.ToString()
  fullName: System.Xml.XmlQualifiedName.ToString()
  type: Method
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/System.Xml/XmlQualifiedName.cs
    id: ToString
    path: src/System.Xml/XmlQualifiedName.cs
    startLine: 156
  assemblies:
  - CSHTML5.Runtime
  namespace: System.Xml
  summary: "\nReturns the string value of the System.Xml.XmlQualifiedName.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nThe string value of the System.Xml.XmlQualifiedName in the format of namespace:localname.\nIf the object does not have a namespace defined, this method returns just\nthe local name.\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: System.Xml.XmlQualifiedName.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Xml.XmlQualifiedName.ToString(System.String,System.String)
  commentId: M:System.Xml.XmlQualifiedName.ToString(System.String,System.String)
  id: ToString(System.String,System.String)
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: ToString(String, String)
  nameWithType: XmlQualifiedName.ToString(String, String)
  fullName: System.Xml.XmlQualifiedName.ToString(System.String, System.String)
  type: Method
  source:
    remote:
      path: G:/Document/Userware/docfx/docfx_project/src/System.Xml/XmlQualifiedName.cs
    id: ToString
    path: src/System.Xml/XmlQualifiedName.cs
    startLine: 171
  assemblies:
  - CSHTML5.Runtime
  namespace: System.Xml
  summary: "\nReturns the string value of the System.Xml.XmlQualifiedName.\n"
  example: []
  syntax:
    content: public static string ToString(string name, string ns)
    parameters:
    - id: name
      type: System.String
      description: The name of the object.
    - id: ns
      type: System.String
      description: The namespace of the object.
    return:
      type: System.String
      description: "\nThe string value of the System.Xml.XmlQualifiedName in the format of namespace:localname.\nIf the object does not have a namespace defined, this method returns just\nthe local name.\n"
    content.vb: Public Shared Function ToString(name As String, ns As String) As String
  overload: System.Xml.XmlQualifiedName.ToString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Xml
  commentId: N:System.Xml
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: System.Xml.XmlQualifiedName
  commentId: T:System.Xml.XmlQualifiedName
  parent: System.Xml
  name: XmlQualifiedName
  nameWithType: XmlQualifiedName
  fullName: System.Xml.XmlQualifiedName
- uid: System.Xml.XmlQualifiedName.#ctor*
  commentId: Overload:System.Xml.XmlQualifiedName.#ctor
  name: XmlQualifiedName
  nameWithType: XmlQualifiedName.XmlQualifiedName
  fullName: System.Xml.XmlQualifiedName.XmlQualifiedName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlQualifiedName.op_Inequality*
  commentId: Overload:System.Xml.XmlQualifiedName.op_Inequality
  name: Inequality
  nameWithType: XmlQualifiedName.Inequality
  fullName: System.Xml.XmlQualifiedName.Inequality
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlQualifiedName.op_Equality*
  commentId: Overload:System.Xml.XmlQualifiedName.op_Equality
  name: Equality
  nameWithType: XmlQualifiedName.Equality
  fullName: System.Xml.XmlQualifiedName.Equality
- uid: System.Xml.XmlQualifiedName.IsEmpty*
  commentId: Overload:System.Xml.XmlQualifiedName.IsEmpty
  name: IsEmpty
  nameWithType: XmlQualifiedName.IsEmpty
  fullName: System.Xml.XmlQualifiedName.IsEmpty
- uid: System.Xml.XmlQualifiedName.Name*
  commentId: Overload:System.Xml.XmlQualifiedName.Name
  name: Name
  nameWithType: XmlQualifiedName.Name
  fullName: System.Xml.XmlQualifiedName.Name
- uid: System.Xml.XmlQualifiedName.Namespace*
  commentId: Overload:System.Xml.XmlQualifiedName.Namespace
  name: Namespace
  nameWithType: XmlQualifiedName.Namespace
  fullName: System.Xml.XmlQualifiedName.Namespace
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlQualifiedName.Equals*
  commentId: Overload:System.Xml.XmlQualifiedName.Equals
  name: Equals
  nameWithType: XmlQualifiedName.Equals
  fullName: System.Xml.XmlQualifiedName.Equals
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlQualifiedName.GetHashCode*
  commentId: Overload:System.Xml.XmlQualifiedName.GetHashCode
  name: GetHashCode
  nameWithType: XmlQualifiedName.GetHashCode
  fullName: System.Xml.XmlQualifiedName.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlQualifiedName.ToString*
  commentId: Overload:System.Xml.XmlQualifiedName.ToString
  name: ToString
  nameWithType: XmlQualifiedName.ToString
  fullName: System.Xml.XmlQualifiedName.ToString
