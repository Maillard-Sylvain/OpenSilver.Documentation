### YamlMime:ManagedReference
items:
- uid: CSHTML5.Profiler
  commentId: T:CSHTML5.Profiler
  id: Profiler
  parent: CSHTML5
  children:
  - CSHTML5.Profiler.ConsoleTime(System.String)
  - CSHTML5.Profiler.ConsoleTimeEnd(System.String)
  - CSHTML5.Profiler.ConsoleTimeLog(System.String)
  - CSHTML5.Profiler.StartMeasuringTime
  - CSHTML5.Profiler.StopMeasuringTime(System.String,System.Double)
  langs:
  - csharp
  - vb
  name: Profiler
  nameWithType: Profiler
  fullName: CSHTML5.Profiler
  type: Class
  source:
    id: Profiler
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\PublicAPI\Profiler\Profiler.cs
    startLine: 33
  assemblies:
  - Runtime.OpenSilver
  namespace: CSHTML5
  summary: "\nProvides static methods for profiling performance in the browser.\n"
  example: []
  syntax:
    content: public static class Profiler
    content.vb: Public Module Profiler
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: CSHTML5.Profiler.StartMeasuringTime
  commentId: M:CSHTML5.Profiler.StartMeasuringTime
  id: StartMeasuringTime
  parent: CSHTML5.Profiler
  langs:
  - csharp
  - vb
  name: StartMeasuringTime()
  nameWithType: Profiler.StartMeasuringTime()
  fullName: CSHTML5.Profiler.StartMeasuringTime()
  type: Method
  source:
    id: StartMeasuringTime
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\PublicAPI\Profiler\Profiler.cs
    startLine: 40
  assemblies:
  - Runtime.OpenSilver
  namespace: CSHTML5
  summary: "\nAllows measuring the cumulative time between the start and the end of the measure. It returns a number that you need to pass to the &quot;StopMeasuringTime()&quot; method.\n"
  example: []
  syntax:
    content: >-
      [JSReplacement("performance.now()")]

      public static double StartMeasuringTime()
    return:
      type: System.Double
      description: A number that you need to pass to the &quot;StopMeasuringTime()&quot; method.
    content.vb: >-
      <JSReplacement("performance.now()")>

      Public Shared Function StartMeasuringTime As Double
  overload: CSHTML5.Profiler.StartMeasuringTime*
  attributes:
  - type: JSIL.Meta.JSReplacementAttribute
    ctor: JSIL.Meta.JSReplacementAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: performance.now()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CSHTML5.Profiler.StopMeasuringTime(System.String,System.Double)
  commentId: M:CSHTML5.Profiler.StopMeasuringTime(System.String,System.Double)
  id: StopMeasuringTime(System.String,System.Double)
  parent: CSHTML5.Profiler
  langs:
  - csharp
  - vb
  name: StopMeasuringTime(String, Double)
  nameWithType: Profiler.StopMeasuringTime(String, Double)
  fullName: CSHTML5.Profiler.StopMeasuringTime(System.String, System.Double)
  type: Method
  source:
    id: StopMeasuringTime
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\PublicAPI\Profiler\Profiler.cs
    startLine: 55
  assemblies:
  - Runtime.OpenSilver
  namespace: CSHTML5
  summary: "\nAllows measuring the time between the start and the end of the measure. The result is &quot;accrued&quot;, meaning that it is cumulative if executed multiple times. You can see the result by calling &quot;ViewProfilerResults()&quot; from the browser console.\n"
  example: []
  syntax:
    content: >-
      [JSReplacement("document.addToPerformanceCounters($measureDescription, $numberReturnedByTheStartMeasuringTimeMethod)")]

      public static void StopMeasuringTime(string measureDescription, double numberReturnedByTheStartMeasuringTimeMethod)
    parameters:
    - id: measureDescription
      type: System.String
      description: An arbitrary text to describe the measure.
    - id: numberReturnedByTheStartMeasuringTimeMethod
      type: System.Double
      description: The number returned by the call to &quot;StartMeasuringTime()&quot;. It is used to calculate the time elapsed between the start and the end of the measure.
    content.vb: >-
      <JSReplacement("document.addToPerformanceCounters($measureDescription, $numberReturnedByTheStartMeasuringTimeMethod)")>

      Public Shared Sub StopMeasuringTime(measureDescription As String, numberReturnedByTheStartMeasuringTimeMethod As Double)
  overload: CSHTML5.Profiler.StopMeasuringTime*
  attributes:
  - type: JSIL.Meta.JSReplacementAttribute
    ctor: JSIL.Meta.JSReplacementAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: document.addToPerformanceCounters($measureDescription, $numberReturnedByTheStartMeasuringTimeMethod)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CSHTML5.Profiler.ConsoleTime(System.String)
  commentId: M:CSHTML5.Profiler.ConsoleTime(System.String)
  id: ConsoleTime(System.String)
  parent: CSHTML5.Profiler
  langs:
  - csharp
  - vb
  name: ConsoleTime(String)
  nameWithType: Profiler.ConsoleTime(String)
  fullName: CSHTML5.Profiler.ConsoleTime(System.String)
  type: Method
  source:
    id: ConsoleTime
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\PublicAPI\Profiler\Profiler.cs
    startLine: 65
  assemblies:
  - Runtime.OpenSilver
  namespace: CSHTML5
  syntax:
    content: >-
      [JSReplacement("console.time($label)")]

      public static void ConsoleTime(string label)
    parameters:
    - id: label
      type: System.String
    content.vb: >-
      <JSReplacement("console.time($label)")>

      Public Shared Sub ConsoleTime(label As String)
  overload: CSHTML5.Profiler.ConsoleTime*
  attributes:
  - type: JSIL.Meta.JSReplacementAttribute
    ctor: JSIL.Meta.JSReplacementAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: console.time($label)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CSHTML5.Profiler.ConsoleTimeEnd(System.String)
  commentId: M:CSHTML5.Profiler.ConsoleTimeEnd(System.String)
  id: ConsoleTimeEnd(System.String)
  parent: CSHTML5.Profiler
  langs:
  - csharp
  - vb
  name: ConsoleTimeEnd(String)
  nameWithType: Profiler.ConsoleTimeEnd(String)
  fullName: CSHTML5.Profiler.ConsoleTimeEnd(System.String)
  type: Method
  source:
    id: ConsoleTimeEnd
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\PublicAPI\Profiler\Profiler.cs
    startLine: 74
  assemblies:
  - Runtime.OpenSilver
  namespace: CSHTML5
  syntax:
    content: >-
      [JSReplacement("console.timeEnd($label)")]

      public static void ConsoleTimeEnd(string label)
    parameters:
    - id: label
      type: System.String
    content.vb: >-
      <JSReplacement("console.timeEnd($label)")>

      Public Shared Sub ConsoleTimeEnd(label As String)
  overload: CSHTML5.Profiler.ConsoleTimeEnd*
  attributes:
  - type: JSIL.Meta.JSReplacementAttribute
    ctor: JSIL.Meta.JSReplacementAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: console.timeEnd($label)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CSHTML5.Profiler.ConsoleTimeLog(System.String)
  commentId: M:CSHTML5.Profiler.ConsoleTimeLog(System.String)
  id: ConsoleTimeLog(System.String)
  parent: CSHTML5.Profiler
  langs:
  - csharp
  - vb
  name: ConsoleTimeLog(String)
  nameWithType: Profiler.ConsoleTimeLog(String)
  fullName: CSHTML5.Profiler.ConsoleTimeLog(System.String)
  type: Method
  source:
    id: ConsoleTimeLog
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\PublicAPI\Profiler\Profiler.cs
    startLine: 83
  assemblies:
  - Runtime.OpenSilver
  namespace: CSHTML5
  syntax:
    content: >-
      [JSReplacement("console.timeLog($label)")]

      public static void ConsoleTimeLog(string label)
    parameters:
    - id: label
      type: System.String
    content.vb: >-
      <JSReplacement("console.timeLog($label)")>

      Public Shared Sub ConsoleTimeLog(label As String)
  overload: CSHTML5.Profiler.ConsoleTimeLog*
  attributes:
  - type: JSIL.Meta.JSReplacementAttribute
    ctor: JSIL.Meta.JSReplacementAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: console.timeLog($label)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: CSHTML5
  commentId: N:CSHTML5
  name: CSHTML5
  nameWithType: CSHTML5
  fullName: CSHTML5
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: CSHTML5.Profiler.StartMeasuringTime*
  commentId: Overload:CSHTML5.Profiler.StartMeasuringTime
  name: StartMeasuringTime
  nameWithType: Profiler.StartMeasuringTime
  fullName: CSHTML5.Profiler.StartMeasuringTime
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: CSHTML5.Profiler.StopMeasuringTime*
  commentId: Overload:CSHTML5.Profiler.StopMeasuringTime
  name: StopMeasuringTime
  nameWithType: Profiler.StopMeasuringTime
  fullName: CSHTML5.Profiler.StopMeasuringTime
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: CSHTML5.Profiler.ConsoleTime*
  commentId: Overload:CSHTML5.Profiler.ConsoleTime
  name: ConsoleTime
  nameWithType: Profiler.ConsoleTime
  fullName: CSHTML5.Profiler.ConsoleTime
- uid: CSHTML5.Profiler.ConsoleTimeEnd*
  commentId: Overload:CSHTML5.Profiler.ConsoleTimeEnd
  name: ConsoleTimeEnd
  nameWithType: Profiler.ConsoleTimeEnd
  fullName: CSHTML5.Profiler.ConsoleTimeEnd
- uid: CSHTML5.Profiler.ConsoleTimeLog*
  commentId: Overload:CSHTML5.Profiler.ConsoleTimeLog
  name: ConsoleTimeLog
  nameWithType: Profiler.ConsoleTimeLog
  fullName: CSHTML5.Profiler.ConsoleTimeLog
