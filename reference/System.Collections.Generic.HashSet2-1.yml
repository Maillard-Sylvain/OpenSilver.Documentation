### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.HashSet2`1
  commentId: T:System.Collections.Generic.HashSet2`1
  id: HashSet2`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.HashSet2`1.#ctor
  - System.Collections.Generic.HashSet2`1.#ctor(IEnumerable{`0})
  - System.Collections.Generic.HashSet2`1.Add(`0)
  - System.Collections.Generic.HashSet2`1.Clear
  - System.Collections.Generic.HashSet2`1.Contains(`0)
  - System.Collections.Generic.HashSet2`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.HashSet2`1.Count
  - System.Collections.Generic.HashSet2`1.IntersectWith(IEnumerable{`0})
  - System.Collections.Generic.HashSet2`1.IsReadOnly
  - System.Collections.Generic.HashSet2`1.Remove(`0)
  langs:
  - csharp
  - vb
  name: HashSet2<T>
  nameWithType: HashSet2<T>
  fullName: System.Collections.Generic.HashSet2<T>
  type: Class
  source:
    id: HashSet2
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\Core\Other\HashSet2_1.cs
    startLine: 30
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: 'public class HashSet2<T> : ICollection<T>, IEnumerable<T>'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class HashSet2(Of T)
          Inherits ICollection(Of T)
          Implements IEnumerable(Of T)
  inheritance:
  - System.Object
  implements:
  - IEnumerable{{T}}
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  nameWithType.vb: HashSet2(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Collections.Generic.HashSet2(Of T)
  name.vb: HashSet2(Of T)
- uid: System.Collections.Generic.HashSet2`1.#ctor
  commentId: M:System.Collections.Generic.HashSet2`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.HashSet2`1
  langs:
  - csharp
  - vb
  name: HashSet2()
  nameWithType: HashSet2<T>.HashSet2()
  fullName: System.Collections.Generic.HashSet2<T>.HashSet2()
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\Core\Other\HashSet2_1.cs
    startLine: 37
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: public HashSet2()
    content.vb: Public Sub New
  overload: System.Collections.Generic.HashSet2`1.#ctor*
  nameWithType.vb: HashSet2(Of T).HashSet2()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet2(Of T).HashSet2()
- uid: System.Collections.Generic.HashSet2`1.#ctor(IEnumerable{`0})
  commentId: M:System.Collections.Generic.HashSet2`1.#ctor(IEnumerable{`0})
  id: '#ctor(IEnumerable{`0})'
  parent: System.Collections.Generic.HashSet2`1
  langs:
  - csharp
  - vb
  name: HashSet2(IEnumerable<T>)
  nameWithType: HashSet2<T>.HashSet2(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet2<T>.HashSet2(IEnumerable<T>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\Core\Other\HashSet2_1.cs
    startLine: 42
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: public HashSet2(IEnumerable<T> source)
    parameters:
    - id: source
      type: IEnumerable{{T}}
    content.vb: Public Sub New(source As IEnumerable(Of T))
  overload: System.Collections.Generic.HashSet2`1.#ctor*
  nameWithType.vb: HashSet2(Of T).HashSet2(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet2(Of T).HashSet2(IEnumerable(Of T))
  name.vb: HashSet2(IEnumerable(Of T))
- uid: System.Collections.Generic.HashSet2`1.Add(`0)
  commentId: M:System.Collections.Generic.HashSet2`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Generic.HashSet2`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: HashSet2<T>.Add(T)
  fullName: System.Collections.Generic.HashSet2<T>.Add(T)
  type: Method
  source:
    id: Add
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\Core\Other\HashSet2_1.cs
    startLine: 60
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: public bool Add(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function Add(item As T) As Boolean
  overload: System.Collections.Generic.HashSet2`1.Add*
  nameWithType.vb: HashSet2(Of T).Add(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet2(Of T).Add(T)
- uid: System.Collections.Generic.HashSet2`1.Clear
  commentId: M:System.Collections.Generic.HashSet2`1.Clear
  id: Clear
  parent: System.Collections.Generic.HashSet2`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: HashSet2<T>.Clear()
  fullName: System.Collections.Generic.HashSet2<T>.Clear()
  type: Method
  source:
    id: Clear
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\Core\Other\HashSet2_1.cs
    startLine: 78
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: System.Collections.Generic.HashSet2`1.Clear*
  nameWithType.vb: HashSet2(Of T).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet2(Of T).Clear()
- uid: System.Collections.Generic.HashSet2`1.Contains(`0)
  commentId: M:System.Collections.Generic.HashSet2`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.HashSet2`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: HashSet2<T>.Contains(T)
  fullName: System.Collections.Generic.HashSet2<T>.Contains(T)
  type: Method
  source:
    id: Contains
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\Core\Other\HashSet2_1.cs
    startLine: 83
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: public bool Contains(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function Contains(item As T) As Boolean
  overload: System.Collections.Generic.HashSet2`1.Contains*
  nameWithType.vb: HashSet2(Of T).Contains(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet2(Of T).Contains(T)
- uid: System.Collections.Generic.HashSet2`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.HashSet2`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.HashSet2`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  nameWithType: HashSet2<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.HashSet2<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    id: CopyTo
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\Core\Other\HashSet2_1.cs
    startLine: 88
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex)
    parameters:
    - id: array
      type: '{T}[]'
    - id: arrayIndex
      type: System.Int32
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer)
  overload: System.Collections.Generic.HashSet2`1.CopyTo*
  nameWithType.vb: HashSet2(Of T).CopyTo(T(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet2(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: System.Collections.Generic.HashSet2`1.Count
  commentId: P:System.Collections.Generic.HashSet2`1.Count
  id: Count
  parent: System.Collections.Generic.HashSet2`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: HashSet2<T>.Count
  fullName: System.Collections.Generic.HashSet2<T>.Count
  type: Property
  source:
    id: Count
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\Core\Other\HashSet2_1.cs
    startLine: 98
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: System.Collections.Generic.HashSet2`1.Count*
  nameWithType.vb: HashSet2(Of T).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.HashSet2(Of T).Count
- uid: System.Collections.Generic.HashSet2`1.IsReadOnly
  commentId: P:System.Collections.Generic.HashSet2`1.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.Generic.HashSet2`1
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: HashSet2<T>.IsReadOnly
  fullName: System.Collections.Generic.HashSet2<T>.IsReadOnly
  type: Property
  source:
    id: IsReadOnly
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\Core\Other\HashSet2_1.cs
    startLine: 103
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: System.Collections.Generic.HashSet2`1.IsReadOnly*
  nameWithType.vb: HashSet2(Of T).IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.HashSet2(Of T).IsReadOnly
- uid: System.Collections.Generic.HashSet2`1.Remove(`0)
  commentId: M:System.Collections.Generic.HashSet2`1.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.HashSet2`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  nameWithType: HashSet2<T>.Remove(T)
  fullName: System.Collections.Generic.HashSet2<T>.Remove(T)
  type: Method
  source:
    id: Remove
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\Core\Other\HashSet2_1.cs
    startLine: 108
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: public bool Remove(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function Remove(item As T) As Boolean
  overload: System.Collections.Generic.HashSet2`1.Remove*
  nameWithType.vb: HashSet2(Of T).Remove(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet2(Of T).Remove(T)
- uid: System.Collections.Generic.HashSet2`1.IntersectWith(IEnumerable{`0})
  commentId: M:System.Collections.Generic.HashSet2`1.IntersectWith(IEnumerable{`0})
  id: IntersectWith(IEnumerable{`0})
  parent: System.Collections.Generic.HashSet2`1
  langs:
  - csharp
  - vb
  name: IntersectWith(IEnumerable<T>)
  nameWithType: HashSet2<T>.IntersectWith(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet2<T>.IntersectWith(IEnumerable<T>)
  type: Method
  source:
    id: IntersectWith
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\Core\Other\HashSet2_1.cs
    startLine: 113
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: public void IntersectWith(IEnumerable<T> other)
    parameters:
    - id: other
      type: IEnumerable{{T}}
    content.vb: Public Sub IntersectWith(other As IEnumerable(Of T))
  overload: System.Collections.Generic.HashSet2`1.IntersectWith*
  nameWithType.vb: HashSet2(Of T).IntersectWith(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet2(Of T).IntersectWith(IEnumerable(Of T))
  name.vb: IntersectWith(IEnumerable(Of T))
references:
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: IEnumerable{{T}}
  commentId: '!:IEnumerable{`0}'
  definition: IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: System.Collections.Generic.HashSet2`1.#ctor*
  commentId: Overload:System.Collections.Generic.HashSet2`1.#ctor
  name: HashSet2
  nameWithType: HashSet2<T>.HashSet2
  fullName: System.Collections.Generic.HashSet2<T>.HashSet2
  nameWithType.vb: HashSet2(Of T).HashSet2
  fullName.vb: System.Collections.Generic.HashSet2(Of T).HashSet2
- uid: System.Collections.Generic.HashSet2`1.Add*
  commentId: Overload:System.Collections.Generic.HashSet2`1.Add
  name: Add
  nameWithType: HashSet2<T>.Add
  fullName: System.Collections.Generic.HashSet2<T>.Add
  nameWithType.vb: HashSet2(Of T).Add
  fullName.vb: System.Collections.Generic.HashSet2(Of T).Add
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.HashSet2`1.Clear*
  commentId: Overload:System.Collections.Generic.HashSet2`1.Clear
  name: Clear
  nameWithType: HashSet2<T>.Clear
  fullName: System.Collections.Generic.HashSet2<T>.Clear
  nameWithType.vb: HashSet2(Of T).Clear
  fullName.vb: System.Collections.Generic.HashSet2(Of T).Clear
- uid: System.Collections.Generic.HashSet2`1.Contains*
  commentId: Overload:System.Collections.Generic.HashSet2`1.Contains
  name: Contains
  nameWithType: HashSet2<T>.Contains
  fullName: System.Collections.Generic.HashSet2<T>.Contains
  nameWithType.vb: HashSet2(Of T).Contains
  fullName.vb: System.Collections.Generic.HashSet2(Of T).Contains
- uid: System.Collections.Generic.HashSet2`1.CopyTo*
  commentId: Overload:System.Collections.Generic.HashSet2`1.CopyTo
  name: CopyTo
  nameWithType: HashSet2<T>.CopyTo
  fullName: System.Collections.Generic.HashSet2<T>.CopyTo
  nameWithType.vb: HashSet2(Of T).CopyTo
  fullName.vb: System.Collections.Generic.HashSet2(Of T).CopyTo
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.HashSet2`1.Count*
  commentId: Overload:System.Collections.Generic.HashSet2`1.Count
  name: Count
  nameWithType: HashSet2<T>.Count
  fullName: System.Collections.Generic.HashSet2<T>.Count
  nameWithType.vb: HashSet2(Of T).Count
  fullName.vb: System.Collections.Generic.HashSet2(Of T).Count
- uid: System.Collections.Generic.HashSet2`1.IsReadOnly*
  commentId: Overload:System.Collections.Generic.HashSet2`1.IsReadOnly
  name: IsReadOnly
  nameWithType: HashSet2<T>.IsReadOnly
  fullName: System.Collections.Generic.HashSet2<T>.IsReadOnly
  nameWithType.vb: HashSet2(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.HashSet2(Of T).IsReadOnly
- uid: System.Collections.Generic.HashSet2`1.Remove*
  commentId: Overload:System.Collections.Generic.HashSet2`1.Remove
  name: Remove
  nameWithType: HashSet2<T>.Remove
  fullName: System.Collections.Generic.HashSet2<T>.Remove
  nameWithType.vb: HashSet2(Of T).Remove
  fullName.vb: System.Collections.Generic.HashSet2(Of T).Remove
- uid: System.Collections.Generic.HashSet2`1.IntersectWith*
  commentId: Overload:System.Collections.Generic.HashSet2`1.IntersectWith
  name: IntersectWith
  nameWithType: HashSet2<T>.IntersectWith
  fullName: System.Collections.Generic.HashSet2<T>.IntersectWith
  nameWithType.vb: HashSet2(Of T).IntersectWith
  fullName.vb: System.Collections.Generic.HashSet2(Of T).IntersectWith
