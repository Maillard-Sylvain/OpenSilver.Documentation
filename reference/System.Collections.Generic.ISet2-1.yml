### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.ISet2`1
  commentId: T:System.Collections.Generic.ISet2`1
  id: ISet2`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.ISet2`1.Add(`0)
  - System.Collections.Generic.ISet2`1.ExceptWith(IEnumerable{`0})
  - System.Collections.Generic.ISet2`1.IntersectWith(IEnumerable{`0})
  - System.Collections.Generic.ISet2`1.IsProperSubsetOf(IEnumerable{`0})
  - System.Collections.Generic.ISet2`1.IsProperSupersetOf(IEnumerable{`0})
  - System.Collections.Generic.ISet2`1.IsSubsetOf(IEnumerable{`0})
  - System.Collections.Generic.ISet2`1.IsSupersetOf(IEnumerable{`0})
  - System.Collections.Generic.ISet2`1.Overlaps(IEnumerable{`0})
  - System.Collections.Generic.ISet2`1.SetEquals(IEnumerable{`0})
  - System.Collections.Generic.ISet2`1.SymmetricExceptWith(IEnumerable{`0})
  - System.Collections.Generic.ISet2`1.UnionWith(IEnumerable{`0})
  langs:
  - csharp
  - vb
  name: ISet2<T>
  nameWithType: ISet2<T>
  fullName: System.Collections.Generic.ISet2<T>
  type: Interface
  source:
    id: ISet2
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\Core\Other\ISet2_1.cs
    startLine: 17
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: 'public interface ISet2<T> : ICollection<T>'
    typeParameters:
    - id: T
    content.vb: >-
      Public Interface ISet2(Of T)
          Inherits ICollection(Of T)
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  nameWithType.vb: ISet2(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: System.Collections.Generic.ISet2(Of T)
  name.vb: ISet2(Of T)
- uid: System.Collections.Generic.ISet2`1.Add(`0)
  commentId: M:System.Collections.Generic.ISet2`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Generic.ISet2`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: ISet2<T>.Add(T)
  fullName: System.Collections.Generic.ISet2<T>.Add(T)
  type: Method
  source:
    id: Add
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\Core\Other\ISet2_1.cs
    startLine: 19
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: bool Add(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Function Add(item As T) As Boolean
  overload: System.Collections.Generic.ISet2`1.Add*
  nameWithType.vb: ISet2(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ISet2(Of T).Add(T)
- uid: System.Collections.Generic.ISet2`1.UnionWith(IEnumerable{`0})
  commentId: M:System.Collections.Generic.ISet2`1.UnionWith(IEnumerable{`0})
  id: UnionWith(IEnumerable{`0})
  parent: System.Collections.Generic.ISet2`1
  langs:
  - csharp
  - vb
  name: UnionWith(IEnumerable<T>)
  nameWithType: ISet2<T>.UnionWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet2<T>.UnionWith(IEnumerable<T>)
  type: Method
  source:
    id: UnionWith
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\Core\Other\ISet2_1.cs
    startLine: 21
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: void UnionWith(IEnumerable<T> other)
    parameters:
    - id: other
      type: IEnumerable{{T}}
    content.vb: Sub UnionWith(other As IEnumerable(Of T))
  overload: System.Collections.Generic.ISet2`1.UnionWith*
  nameWithType.vb: ISet2(Of T).UnionWith(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet2(Of T).UnionWith(IEnumerable(Of T))
  name.vb: UnionWith(IEnumerable(Of T))
- uid: System.Collections.Generic.ISet2`1.IntersectWith(IEnumerable{`0})
  commentId: M:System.Collections.Generic.ISet2`1.IntersectWith(IEnumerable{`0})
  id: IntersectWith(IEnumerable{`0})
  parent: System.Collections.Generic.ISet2`1
  langs:
  - csharp
  - vb
  name: IntersectWith(IEnumerable<T>)
  nameWithType: ISet2<T>.IntersectWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet2<T>.IntersectWith(IEnumerable<T>)
  type: Method
  source:
    id: IntersectWith
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\Core\Other\ISet2_1.cs
    startLine: 23
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: void IntersectWith(IEnumerable<T> other)
    parameters:
    - id: other
      type: IEnumerable{{T}}
    content.vb: Sub IntersectWith(other As IEnumerable(Of T))
  overload: System.Collections.Generic.ISet2`1.IntersectWith*
  nameWithType.vb: ISet2(Of T).IntersectWith(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet2(Of T).IntersectWith(IEnumerable(Of T))
  name.vb: IntersectWith(IEnumerable(Of T))
- uid: System.Collections.Generic.ISet2`1.ExceptWith(IEnumerable{`0})
  commentId: M:System.Collections.Generic.ISet2`1.ExceptWith(IEnumerable{`0})
  id: ExceptWith(IEnumerable{`0})
  parent: System.Collections.Generic.ISet2`1
  langs:
  - csharp
  - vb
  name: ExceptWith(IEnumerable<T>)
  nameWithType: ISet2<T>.ExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet2<T>.ExceptWith(IEnumerable<T>)
  type: Method
  source:
    id: ExceptWith
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\Core\Other\ISet2_1.cs
    startLine: 25
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: void ExceptWith(IEnumerable<T> other)
    parameters:
    - id: other
      type: IEnumerable{{T}}
    content.vb: Sub ExceptWith(other As IEnumerable(Of T))
  overload: System.Collections.Generic.ISet2`1.ExceptWith*
  nameWithType.vb: ISet2(Of T).ExceptWith(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet2(Of T).ExceptWith(IEnumerable(Of T))
  name.vb: ExceptWith(IEnumerable(Of T))
- uid: System.Collections.Generic.ISet2`1.SymmetricExceptWith(IEnumerable{`0})
  commentId: M:System.Collections.Generic.ISet2`1.SymmetricExceptWith(IEnumerable{`0})
  id: SymmetricExceptWith(IEnumerable{`0})
  parent: System.Collections.Generic.ISet2`1
  langs:
  - csharp
  - vb
  name: SymmetricExceptWith(IEnumerable<T>)
  nameWithType: ISet2<T>.SymmetricExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet2<T>.SymmetricExceptWith(IEnumerable<T>)
  type: Method
  source:
    id: SymmetricExceptWith
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\Core\Other\ISet2_1.cs
    startLine: 27
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: void SymmetricExceptWith(IEnumerable<T> other)
    parameters:
    - id: other
      type: IEnumerable{{T}}
    content.vb: Sub SymmetricExceptWith(other As IEnumerable(Of T))
  overload: System.Collections.Generic.ISet2`1.SymmetricExceptWith*
  nameWithType.vb: ISet2(Of T).SymmetricExceptWith(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet2(Of T).SymmetricExceptWith(IEnumerable(Of T))
  name.vb: SymmetricExceptWith(IEnumerable(Of T))
- uid: System.Collections.Generic.ISet2`1.IsSubsetOf(IEnumerable{`0})
  commentId: M:System.Collections.Generic.ISet2`1.IsSubsetOf(IEnumerable{`0})
  id: IsSubsetOf(IEnumerable{`0})
  parent: System.Collections.Generic.ISet2`1
  langs:
  - csharp
  - vb
  name: IsSubsetOf(IEnumerable<T>)
  nameWithType: ISet2<T>.IsSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet2<T>.IsSubsetOf(IEnumerable<T>)
  type: Method
  source:
    id: IsSubsetOf
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\Core\Other\ISet2_1.cs
    startLine: 29
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: bool IsSubsetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type: IEnumerable{{T}}
    return:
      type: System.Boolean
    content.vb: Function IsSubsetOf(other As IEnumerable(Of T)) As Boolean
  overload: System.Collections.Generic.ISet2`1.IsSubsetOf*
  nameWithType.vb: ISet2(Of T).IsSubsetOf(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet2(Of T).IsSubsetOf(IEnumerable(Of T))
  name.vb: IsSubsetOf(IEnumerable(Of T))
- uid: System.Collections.Generic.ISet2`1.IsSupersetOf(IEnumerable{`0})
  commentId: M:System.Collections.Generic.ISet2`1.IsSupersetOf(IEnumerable{`0})
  id: IsSupersetOf(IEnumerable{`0})
  parent: System.Collections.Generic.ISet2`1
  langs:
  - csharp
  - vb
  name: IsSupersetOf(IEnumerable<T>)
  nameWithType: ISet2<T>.IsSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet2<T>.IsSupersetOf(IEnumerable<T>)
  type: Method
  source:
    id: IsSupersetOf
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\Core\Other\ISet2_1.cs
    startLine: 31
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: bool IsSupersetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type: IEnumerable{{T}}
    return:
      type: System.Boolean
    content.vb: Function IsSupersetOf(other As IEnumerable(Of T)) As Boolean
  overload: System.Collections.Generic.ISet2`1.IsSupersetOf*
  nameWithType.vb: ISet2(Of T).IsSupersetOf(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet2(Of T).IsSupersetOf(IEnumerable(Of T))
  name.vb: IsSupersetOf(IEnumerable(Of T))
- uid: System.Collections.Generic.ISet2`1.IsProperSupersetOf(IEnumerable{`0})
  commentId: M:System.Collections.Generic.ISet2`1.IsProperSupersetOf(IEnumerable{`0})
  id: IsProperSupersetOf(IEnumerable{`0})
  parent: System.Collections.Generic.ISet2`1
  langs:
  - csharp
  - vb
  name: IsProperSupersetOf(IEnumerable<T>)
  nameWithType: ISet2<T>.IsProperSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet2<T>.IsProperSupersetOf(IEnumerable<T>)
  type: Method
  source:
    id: IsProperSupersetOf
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\Core\Other\ISet2_1.cs
    startLine: 33
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: bool IsProperSupersetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type: IEnumerable{{T}}
    return:
      type: System.Boolean
    content.vb: Function IsProperSupersetOf(other As IEnumerable(Of T)) As Boolean
  overload: System.Collections.Generic.ISet2`1.IsProperSupersetOf*
  nameWithType.vb: ISet2(Of T).IsProperSupersetOf(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet2(Of T).IsProperSupersetOf(IEnumerable(Of T))
  name.vb: IsProperSupersetOf(IEnumerable(Of T))
- uid: System.Collections.Generic.ISet2`1.IsProperSubsetOf(IEnumerable{`0})
  commentId: M:System.Collections.Generic.ISet2`1.IsProperSubsetOf(IEnumerable{`0})
  id: IsProperSubsetOf(IEnumerable{`0})
  parent: System.Collections.Generic.ISet2`1
  langs:
  - csharp
  - vb
  name: IsProperSubsetOf(IEnumerable<T>)
  nameWithType: ISet2<T>.IsProperSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet2<T>.IsProperSubsetOf(IEnumerable<T>)
  type: Method
  source:
    id: IsProperSubsetOf
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\Core\Other\ISet2_1.cs
    startLine: 35
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: bool IsProperSubsetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type: IEnumerable{{T}}
    return:
      type: System.Boolean
    content.vb: Function IsProperSubsetOf(other As IEnumerable(Of T)) As Boolean
  overload: System.Collections.Generic.ISet2`1.IsProperSubsetOf*
  nameWithType.vb: ISet2(Of T).IsProperSubsetOf(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet2(Of T).IsProperSubsetOf(IEnumerable(Of T))
  name.vb: IsProperSubsetOf(IEnumerable(Of T))
- uid: System.Collections.Generic.ISet2`1.Overlaps(IEnumerable{`0})
  commentId: M:System.Collections.Generic.ISet2`1.Overlaps(IEnumerable{`0})
  id: Overlaps(IEnumerable{`0})
  parent: System.Collections.Generic.ISet2`1
  langs:
  - csharp
  - vb
  name: Overlaps(IEnumerable<T>)
  nameWithType: ISet2<T>.Overlaps(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet2<T>.Overlaps(IEnumerable<T>)
  type: Method
  source:
    id: Overlaps
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\Core\Other\ISet2_1.cs
    startLine: 37
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: bool Overlaps(IEnumerable<T> other)
    parameters:
    - id: other
      type: IEnumerable{{T}}
    return:
      type: System.Boolean
    content.vb: Function Overlaps(other As IEnumerable(Of T)) As Boolean
  overload: System.Collections.Generic.ISet2`1.Overlaps*
  nameWithType.vb: ISet2(Of T).Overlaps(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet2(Of T).Overlaps(IEnumerable(Of T))
  name.vb: Overlaps(IEnumerable(Of T))
- uid: System.Collections.Generic.ISet2`1.SetEquals(IEnumerable{`0})
  commentId: M:System.Collections.Generic.ISet2`1.SetEquals(IEnumerable{`0})
  id: SetEquals(IEnumerable{`0})
  parent: System.Collections.Generic.ISet2`1
  langs:
  - csharp
  - vb
  name: SetEquals(IEnumerable<T>)
  nameWithType: ISet2<T>.SetEquals(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet2<T>.SetEquals(IEnumerable<T>)
  type: Method
  source:
    id: SetEquals
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\Core\Other\ISet2_1.cs
    startLine: 39
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: bool SetEquals(IEnumerable<T> other)
    parameters:
    - id: other
      type: IEnumerable{{T}}
    return:
      type: System.Boolean
    content.vb: Function SetEquals(other As IEnumerable(Of T)) As Boolean
  overload: System.Collections.Generic.ISet2`1.SetEquals*
  nameWithType.vb: ISet2(Of T).SetEquals(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet2(Of T).SetEquals(IEnumerable(Of T))
  name.vb: SetEquals(IEnumerable(Of T))
references:
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: System.Collections.Generic.ISet2`1.Add*
  commentId: Overload:System.Collections.Generic.ISet2`1.Add
  name: Add
  nameWithType: ISet2<T>.Add
  fullName: System.Collections.Generic.ISet2<T>.Add
  nameWithType.vb: ISet2(Of T).Add
  fullName.vb: System.Collections.Generic.ISet2(Of T).Add
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.ISet2`1.UnionWith*
  commentId: Overload:System.Collections.Generic.ISet2`1.UnionWith
  name: UnionWith
  nameWithType: ISet2<T>.UnionWith
  fullName: System.Collections.Generic.ISet2<T>.UnionWith
  nameWithType.vb: ISet2(Of T).UnionWith
  fullName.vb: System.Collections.Generic.ISet2(Of T).UnionWith
- uid: IEnumerable{{T}}
  commentId: '!:IEnumerable{`0}'
  definition: IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ISet2`1.IntersectWith*
  commentId: Overload:System.Collections.Generic.ISet2`1.IntersectWith
  name: IntersectWith
  nameWithType: ISet2<T>.IntersectWith
  fullName: System.Collections.Generic.ISet2<T>.IntersectWith
  nameWithType.vb: ISet2(Of T).IntersectWith
  fullName.vb: System.Collections.Generic.ISet2(Of T).IntersectWith
- uid: System.Collections.Generic.ISet2`1.ExceptWith*
  commentId: Overload:System.Collections.Generic.ISet2`1.ExceptWith
  name: ExceptWith
  nameWithType: ISet2<T>.ExceptWith
  fullName: System.Collections.Generic.ISet2<T>.ExceptWith
  nameWithType.vb: ISet2(Of T).ExceptWith
  fullName.vb: System.Collections.Generic.ISet2(Of T).ExceptWith
- uid: System.Collections.Generic.ISet2`1.SymmetricExceptWith*
  commentId: Overload:System.Collections.Generic.ISet2`1.SymmetricExceptWith
  name: SymmetricExceptWith
  nameWithType: ISet2<T>.SymmetricExceptWith
  fullName: System.Collections.Generic.ISet2<T>.SymmetricExceptWith
  nameWithType.vb: ISet2(Of T).SymmetricExceptWith
  fullName.vb: System.Collections.Generic.ISet2(Of T).SymmetricExceptWith
- uid: System.Collections.Generic.ISet2`1.IsSubsetOf*
  commentId: Overload:System.Collections.Generic.ISet2`1.IsSubsetOf
  name: IsSubsetOf
  nameWithType: ISet2<T>.IsSubsetOf
  fullName: System.Collections.Generic.ISet2<T>.IsSubsetOf
  nameWithType.vb: ISet2(Of T).IsSubsetOf
  fullName.vb: System.Collections.Generic.ISet2(Of T).IsSubsetOf
- uid: System.Collections.Generic.ISet2`1.IsSupersetOf*
  commentId: Overload:System.Collections.Generic.ISet2`1.IsSupersetOf
  name: IsSupersetOf
  nameWithType: ISet2<T>.IsSupersetOf
  fullName: System.Collections.Generic.ISet2<T>.IsSupersetOf
  nameWithType.vb: ISet2(Of T).IsSupersetOf
  fullName.vb: System.Collections.Generic.ISet2(Of T).IsSupersetOf
- uid: System.Collections.Generic.ISet2`1.IsProperSupersetOf*
  commentId: Overload:System.Collections.Generic.ISet2`1.IsProperSupersetOf
  name: IsProperSupersetOf
  nameWithType: ISet2<T>.IsProperSupersetOf
  fullName: System.Collections.Generic.ISet2<T>.IsProperSupersetOf
  nameWithType.vb: ISet2(Of T).IsProperSupersetOf
  fullName.vb: System.Collections.Generic.ISet2(Of T).IsProperSupersetOf
- uid: System.Collections.Generic.ISet2`1.IsProperSubsetOf*
  commentId: Overload:System.Collections.Generic.ISet2`1.IsProperSubsetOf
  name: IsProperSubsetOf
  nameWithType: ISet2<T>.IsProperSubsetOf
  fullName: System.Collections.Generic.ISet2<T>.IsProperSubsetOf
  nameWithType.vb: ISet2(Of T).IsProperSubsetOf
  fullName.vb: System.Collections.Generic.ISet2(Of T).IsProperSubsetOf
- uid: System.Collections.Generic.ISet2`1.Overlaps*
  commentId: Overload:System.Collections.Generic.ISet2`1.Overlaps
  name: Overlaps
  nameWithType: ISet2<T>.Overlaps
  fullName: System.Collections.Generic.ISet2<T>.Overlaps
  nameWithType.vb: ISet2(Of T).Overlaps
  fullName.vb: System.Collections.Generic.ISet2(Of T).Overlaps
- uid: System.Collections.Generic.ISet2`1.SetEquals*
  commentId: Overload:System.Collections.Generic.ISet2`1.SetEquals
  name: SetEquals
  nameWithType: ISet2<T>.SetEquals
  fullName: System.Collections.Generic.ISet2<T>.SetEquals
  nameWithType.vb: ISet2(Of T).SetEquals
  fullName.vb: System.Collections.Generic.ISet2(Of T).SetEquals
