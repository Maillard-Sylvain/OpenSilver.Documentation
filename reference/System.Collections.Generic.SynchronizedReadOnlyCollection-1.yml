### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  commentId: T:System.Collections.Generic.SynchronizedReadOnlyCollection`1
  id: SynchronizedReadOnlyCollection`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,IEnumerable{`0})
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains(`0)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf(`0)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item(System.Int32)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items
  langs:
  - csharp
  - vb
  name: SynchronizedReadOnlyCollection<T>
  nameWithType: SynchronizedReadOnlyCollection<T>
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>
  type: Class
  source:
    id: SynchronizedReadOnlyCollection
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Collections.Generic\WORKINPROGRESS\SynchronizedReadOnlyCollection.cs
    startLine: 13
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: 'public class SynchronizedReadOnlyCollection<T> : IList<T>, ICollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class SynchronizedReadOnlyCollection(Of T)
          Inherits IList(Of T)
          Implements ICollection(Of T), IEnumerable(Of T), IList, ICollection, IEnumerable
  inheritance:
  - System.Object
  implements:
  - ICollection{{T}}
  - IEnumerable{{T}}
  - IList
  - ICollection
  - IEnumerable
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T)
  name.vb: SynchronizedReadOnlyCollection(Of T)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,IEnumerable{`0})
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,IEnumerable{`0})
  id: '#ctor(System.Object,IEnumerable{`0})'
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: SynchronizedReadOnlyCollection(Object, IEnumerable<T>)
  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object, IEnumerable<T>)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(System.Object, IEnumerable<T>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Collections.Generic\WORKINPROGRESS\SynchronizedReadOnlyCollection.cs
    startLine: 30
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: public SynchronizedReadOnlyCollection(object syncRoot, IEnumerable<T> list)
    parameters:
    - id: syncRoot
      type: System.Object
    - id: list
      type: IEnumerable{{T}}
    content.vb: Public Sub New(syncRoot As Object, list As IEnumerable(Of T))
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor*
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).SynchronizedReadOnlyCollection(Object, IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).SynchronizedReadOnlyCollection(System.Object, IEnumerable(Of T))
  name.vb: SynchronizedReadOnlyCollection(Object, IEnumerable(Of T))
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: SynchronizedReadOnlyCollection<T>.Item[Int32]
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Item[System.Int32]
  type: Property
  source:
    id: this[]
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Collections.Generic\WORKINPROGRESS\SynchronizedReadOnlyCollection.cs
    startLine: 43
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: public T this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: '{T}'
    content.vb: Public ReadOnly Property Item(index As Integer) As T
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item*
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count
  commentId: P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count
  id: Count
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: SynchronizedReadOnlyCollection<T>.Count
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Count
  type: Property
  source:
    id: Count
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Collections.Generic\WORKINPROGRESS\SynchronizedReadOnlyCollection.cs
    startLine: 81
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count*
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).Count
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items
  commentId: P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items
  id: Items
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: Items
  nameWithType: SynchronizedReadOnlyCollection<T>.Items
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Items
  type: Property
  source:
    id: Items
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Collections.Generic\WORKINPROGRESS\SynchronizedReadOnlyCollection.cs
    startLine: 90
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: protected IList<T> Items { get; }
    parameters: []
    return:
      type: IList{{T}}
    content.vb: Protected ReadOnly Property Items As IList(Of T)
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items*
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).Items
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).Items
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: SynchronizedReadOnlyCollection<T>.Contains(T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Contains(T)
  type: Method
  source:
    id: Contains
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Collections.Generic\WORKINPROGRESS\SynchronizedReadOnlyCollection.cs
    startLine: 163
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: public bool Contains(T value)
    parameters:
    - id: value
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function Contains(value As T) As Boolean
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains*
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).Contains(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).Contains(T)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    id: CopyTo
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Collections.Generic\WORKINPROGRESS\SynchronizedReadOnlyCollection.cs
    startLine: 179
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: public void CopyTo(T[] array, int index)
    parameters:
    - id: array
      type: '{T}[]'
    - id: index
      type: System.Int32
    content.vb: Public Sub CopyTo(array As T(), index As Integer)
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo*
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).CopyTo(T(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: SynchronizedReadOnlyCollection<T>.GetEnumerator()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.GetEnumerator()
  type: Method
  source:
    id: GetEnumerator
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Collections.Generic\WORKINPROGRESS\SynchronizedReadOnlyCollection.cs
    startLine: 191
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: public IEnumerator<T> GetEnumerator()
    return:
      type: IEnumerator{{T}}
    content.vb: Public Function GetEnumerator As IEnumerator(Of T)
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator*
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).GetEnumerator()
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IndexOf(T)
  nameWithType: SynchronizedReadOnlyCollection<T>.IndexOf(T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IndexOf(T)
  type: Method
  source:
    id: IndexOf
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Collections.Generic\WORKINPROGRESS\SynchronizedReadOnlyCollection.cs
    startLine: 206
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: public int IndexOf(T value)
    parameters:
    - id: value
      type: '{T}'
    return:
      type: System.Int32
    content.vb: Public Function IndexOf(value As T) As Integer
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf*
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).IndexOf(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).IndexOf(T)
references:
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: ICollection{{T}}
  commentId: '!:ICollection{`0}'
  definition: ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable{{T}}
  commentId: '!:IEnumerable{`0}'
  definition: IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IList
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: IList
- uid: ICollection
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: ICollection
- uid: IEnumerable
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: IEnumerable
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: ICollection`1
  isExternal: true
  name: ICollection<>
  nameWithType: ICollection<>
  fullName: ICollection<>
  nameWithType.vb: ICollection(Of )
  fullName.vb: ICollection(Of )
  name.vb: ICollection(Of )
  spec.csharp:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor
  name: SynchronizedReadOnlyCollection
  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).SynchronizedReadOnlyCollection
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).SynchronizedReadOnlyCollection
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item
  name: Item
  nameWithType: SynchronizedReadOnlyCollection<T>.Item
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Item
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).Item
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).Item
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count
  name: Count
  nameWithType: SynchronizedReadOnlyCollection<T>.Count
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Count
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).Count
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).Count
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items
  name: Items
  nameWithType: SynchronizedReadOnlyCollection<T>.Items
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Items
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).Items
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).Items
- uid: IList{{T}}
  commentId: '!:IList{`0}'
  definition: IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IList`1
  isExternal: true
  name: IList<>
  nameWithType: IList<>
  fullName: IList<>
  nameWithType.vb: IList(Of )
  fullName.vb: IList(Of )
  name.vb: IList(Of )
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains
  name: Contains
  nameWithType: SynchronizedReadOnlyCollection<T>.Contains
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Contains
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).Contains
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).Contains
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo
  name: CopyTo
  nameWithType: SynchronizedReadOnlyCollection<T>.CopyTo
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.CopyTo
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).CopyTo
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).CopyTo
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator
  name: GetEnumerator
  nameWithType: SynchronizedReadOnlyCollection<T>.GetEnumerator
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.GetEnumerator
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).GetEnumerator
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).GetEnumerator
- uid: IEnumerator{{T}}
  commentId: '!:IEnumerator{`0}'
  definition: IEnumerator`1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerator`1
  isExternal: true
  name: IEnumerator<>
  nameWithType: IEnumerator<>
  fullName: IEnumerator<>
  nameWithType.vb: IEnumerator(Of )
  fullName.vb: IEnumerator(Of )
  name.vb: IEnumerator(Of )
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf
  name: IndexOf
  nameWithType: SynchronizedReadOnlyCollection<T>.IndexOf
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IndexOf
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).IndexOf
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).IndexOf
