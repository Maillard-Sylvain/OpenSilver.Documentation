### YamlMime:ManagedReference
items:
- uid: System.Linq.GroupedEnumerable`3
  commentId: T:System.Linq.GroupedEnumerable`3
  id: GroupedEnumerable`3
  parent: System.Linq
  children:
  - System.Linq.GroupedEnumerable`3.#ctor(IEnumerable{`0},Func{`0,`1},Func{`0,`2},IEqualityComparer{`1})
  - System.Linq.GroupedEnumerable`3.GetEnumerator
  langs:
  - csharp
  - vb
  name: GroupedEnumerable<TSource, TKey, TElement>
  nameWithType: GroupedEnumerable<TSource, TKey, TElement>
  fullName: System.Linq.GroupedEnumerable<TSource, TKey, TElement>
  type: Class
  source:
    id: GroupedEnumerable
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\ToBeReviewed\GroupedEnumerable_3.cs
    startLine: 24
  assemblies:
  - OpenSilver
  namespace: System.Linq
  syntax:
    content: 'public class GroupedEnumerable<TSource, TKey, TElement> : IEnumerable<IGrouping<TKey, TElement>>'
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TElement
    content.vb: >-
      Public Class GroupedEnumerable(Of TSource, TKey, TElement)
          Inherits IEnumerable(Of IGrouping(Of TKey, TElement))
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  nameWithType.vb: GroupedEnumerable(Of TSource, TKey, TElement)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Linq.GroupedEnumerable(Of TSource, TKey, TElement)
  name.vb: GroupedEnumerable(Of TSource, TKey, TElement)
- uid: System.Linq.GroupedEnumerable`3.#ctor(IEnumerable{`0},Func{`0,`1},Func{`0,`2},IEqualityComparer{`1})
  commentId: M:System.Linq.GroupedEnumerable`3.#ctor(IEnumerable{`0},Func{`0,`1},Func{`0,`2},IEqualityComparer{`1})
  id: '#ctor(IEnumerable{`0},Func{`0,`1},Func{`0,`2},IEqualityComparer{`1})'
  parent: System.Linq.GroupedEnumerable`3
  langs:
  - csharp
  - vb
  name: GroupedEnumerable(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)
  nameWithType: GroupedEnumerable<TSource, TKey, TElement>.GroupedEnumerable(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)
  fullName: System.Linq.GroupedEnumerable<TSource, TKey, TElement>.GroupedEnumerable(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\ToBeReviewed\GroupedEnumerable_3.cs
    startLine: 28
  assemblies:
  - OpenSilver
  namespace: System.Linq
  syntax:
    content: public GroupedEnumerable(IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: source
      type: IEnumerable{{TSource}}
    - id: keySelector
      type: Func{{TSource},{TKey}}
    - id: elementSelector
      type: Func{{TSource},{TElement}}
    - id: comparer
      type: IEqualityComparer{{TKey}}
    content.vb: Public Sub New(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey))
  overload: System.Linq.GroupedEnumerable`3.#ctor*
  nameWithType.vb: GroupedEnumerable(Of TSource, TKey, TElement).GroupedEnumerable(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Linq.GroupedEnumerable(Of TSource, TKey, TElement).GroupedEnumerable(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))
  name.vb: GroupedEnumerable(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))
- uid: System.Linq.GroupedEnumerable`3.GetEnumerator
  commentId: M:System.Linq.GroupedEnumerable`3.GetEnumerator
  id: GetEnumerator
  parent: System.Linq.GroupedEnumerable`3
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: GroupedEnumerable<TSource, TKey, TElement>.GetEnumerator()
  fullName: System.Linq.GroupedEnumerable<TSource, TKey, TElement>.GetEnumerator()
  type: Method
  source:
    id: GetEnumerator
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\ToBeReviewed\GroupedEnumerable_3.cs
    startLine: 57
  assemblies:
  - OpenSilver
  namespace: System.Linq
  syntax:
    content: public IEnumerator<IGrouping<TKey, TElement>> GetEnumerator()
    return:
      type: IEnumerator{IGrouping{{TKey},{TElement}}}
    content.vb: Public Function GetEnumerator As IEnumerator(Of IGrouping(Of TKey, TElement))
  overload: System.Linq.GroupedEnumerable`3.GetEnumerator*
  nameWithType.vb: GroupedEnumerable(Of TSource, TKey, TElement).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Linq.GroupedEnumerable(Of TSource, TKey, TElement).GetEnumerator()
references:
- uid: System.Linq
  commentId: N:System.Linq
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: System.Linq.GroupedEnumerable`3.#ctor*
  commentId: Overload:System.Linq.GroupedEnumerable`3.#ctor
  name: GroupedEnumerable
  nameWithType: GroupedEnumerable<TSource, TKey, TElement>.GroupedEnumerable
  fullName: System.Linq.GroupedEnumerable<TSource, TKey, TElement>.GroupedEnumerable
  nameWithType.vb: GroupedEnumerable(Of TSource, TKey, TElement).GroupedEnumerable
  fullName.vb: System.Linq.GroupedEnumerable(Of TSource, TKey, TElement).GroupedEnumerable
- uid: IEnumerable{{TSource}}
  commentId: '!:IEnumerable{`0}'
  definition: IEnumerable`1
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: IEnumerable<TSource>
  nameWithType.vb: IEnumerable(Of TSource)
  fullName.vb: IEnumerable(Of TSource)
  name.vb: IEnumerable(Of TSource)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{{TSource},{TKey}}
  commentId: '!:Func{`0,`1}'
  definition: Func`2
  name: Func<TSource, TKey>
  nameWithType: Func<TSource, TKey>
  fullName: Func<TSource, TKey>
  nameWithType.vb: Func(Of TSource, TKey)
  fullName.vb: Func(Of TSource, TKey)
  name.vb: Func(Of TSource, TKey)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{{TSource},{TElement}}
  commentId: '!:Func{`0,`2}'
  definition: Func`2
  name: Func<TSource, TElement>
  nameWithType: Func<TSource, TElement>
  fullName: Func<TSource, TElement>
  nameWithType.vb: Func(Of TSource, TElement)
  fullName.vb: Func(Of TSource, TElement)
  name.vb: Func(Of TSource, TElement)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: IEqualityComparer{{TKey}}
  commentId: '!:IEqualityComparer{`1}'
  definition: IEqualityComparer`1
  name: IEqualityComparer<TKey>
  nameWithType: IEqualityComparer<TKey>
  fullName: IEqualityComparer<TKey>
  nameWithType.vb: IEqualityComparer(Of TKey)
  fullName.vb: IEqualityComparer(Of TKey)
  name.vb: IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<>
  nameWithType: IEqualityComparer<>
  fullName: IEqualityComparer<>
  nameWithType.vb: IEqualityComparer(Of )
  fullName.vb: IEqualityComparer(Of )
  name.vb: IEqualityComparer(Of )
  spec.csharp:
  - uid: IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.GroupedEnumerable`3.GetEnumerator*
  commentId: Overload:System.Linq.GroupedEnumerable`3.GetEnumerator
  name: GetEnumerator
  nameWithType: GroupedEnumerable<TSource, TKey, TElement>.GetEnumerator
  fullName: System.Linq.GroupedEnumerable<TSource, TKey, TElement>.GetEnumerator
  nameWithType.vb: GroupedEnumerable(Of TSource, TKey, TElement).GetEnumerator
  fullName.vb: System.Linq.GroupedEnumerable(Of TSource, TKey, TElement).GetEnumerator
- uid: IEnumerator{IGrouping{{TKey},{TElement}}}
  commentId: '!:IEnumerator{IGrouping{`1,`2}}'
  definition: IEnumerator`1
  name: IEnumerator<IGrouping<TKey, TElement>>
  nameWithType: IEnumerator<IGrouping<TKey, TElement>>
  fullName: IEnumerator<IGrouping<TKey, TElement>>
  nameWithType.vb: IEnumerator(Of IGrouping(Of TKey, TElement))
  fullName.vb: IEnumerator(Of IGrouping(Of TKey, TElement))
  name.vb: IEnumerator(Of IGrouping(Of TKey, TElement))
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerator`1
  isExternal: true
  name: IEnumerator<>
  nameWithType: IEnumerator<>
  fullName: IEnumerator<>
  nameWithType.vb: IEnumerator(Of )
  fullName.vb: IEnumerator(Of )
  name.vb: IEnumerator(Of )
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
