### YamlMime:ManagedReference
items:
- uid: System.Linq.Grouping`2
  commentId: T:System.Linq.Grouping`2
  id: Grouping`2
  parent: System.Linq
  children:
  - System.Linq.Grouping`2.GetEnumerator
  - System.Linq.Grouping`2.Key
  langs:
  - csharp
  - vb
  name: Grouping<TKey, TElement>
  nameWithType: Grouping<TKey, TElement>
  fullName: System.Linq.Grouping<TKey, TElement>
  type: Class
  source:
    id: Grouping
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\ToBeReviewed\Grouping_2.cs
    startLine: 26
  assemblies:
  - OpenSilver
  namespace: System.Linq
  syntax:
    content: 'public class Grouping<TKey, TElement> : IGrouping<TKey, TElement>, IEnumerable<TElement>'
    typeParameters:
    - id: TKey
    - id: TElement
    content.vb: >-
      Public Class Grouping(Of TKey, TElement)
          Inherits IGrouping(Of TKey, TElement)
          Implements IEnumerable(Of TElement)
  inheritance:
  - System.Object
  implements:
  - IEnumerable{{TElement}}
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  nameWithType.vb: Grouping(Of TKey, TElement)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Linq.Grouping(Of TKey, TElement)
  name.vb: Grouping(Of TKey, TElement)
- uid: System.Linq.Grouping`2.Key
  commentId: P:System.Linq.Grouping`2.Key
  id: Key
  parent: System.Linq.Grouping`2
  langs:
  - csharp
  - vb
  name: Key
  nameWithType: Grouping<TKey, TElement>.Key
  fullName: System.Linq.Grouping<TKey, TElement>.Key
  type: Property
  source:
    id: Key
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\ToBeReviewed\Grouping_2.cs
    startLine: 31
  assemblies:
  - OpenSilver
  namespace: System.Linq
  syntax:
    content: public TKey Key { get; }
    parameters: []
    return:
      type: '{TKey}'
    content.vb: Public ReadOnly Property Key As TKey
  overload: System.Linq.Grouping`2.Key*
  nameWithType.vb: Grouping(Of TKey, TElement).Key
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Linq.Grouping(Of TKey, TElement).Key
- uid: System.Linq.Grouping`2.GetEnumerator
  commentId: M:System.Linq.Grouping`2.GetEnumerator
  id: GetEnumerator
  parent: System.Linq.Grouping`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: Grouping<TKey, TElement>.GetEnumerator()
  fullName: System.Linq.Grouping<TKey, TElement>.GetEnumerator()
  type: Method
  source:
    id: GetEnumerator
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\ToBeReviewed\Grouping_2.cs
    startLine: 47
  assemblies:
  - OpenSilver
  namespace: System.Linq
  syntax:
    content: public IEnumerator<TElement> GetEnumerator()
    return:
      type: IEnumerator{{TElement}}
    content.vb: Public Function GetEnumerator As IEnumerator(Of TElement)
  overload: System.Linq.Grouping`2.GetEnumerator*
  nameWithType.vb: Grouping(Of TKey, TElement).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Linq.Grouping(Of TKey, TElement).GetEnumerator()
references:
- uid: System.Linq
  commentId: N:System.Linq
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: IEnumerable{{TElement}}
  commentId: '!:IEnumerable{`1}'
  definition: IEnumerable`1
  name: IEnumerable<TElement>
  nameWithType: IEnumerable<TElement>
  fullName: IEnumerable<TElement>
  nameWithType.vb: IEnumerable(Of TElement)
  fullName.vb: IEnumerable(Of TElement)
  name.vb: IEnumerable(Of TElement)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: System.Linq.Grouping`2.Key*
  commentId: Overload:System.Linq.Grouping`2.Key
  name: Key
  nameWithType: Grouping<TKey, TElement>.Key
  fullName: System.Linq.Grouping<TKey, TElement>.Key
  nameWithType.vb: Grouping(Of TKey, TElement).Key
  fullName.vb: System.Linq.Grouping(Of TKey, TElement).Key
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TKey
  commentId: '!:TKey'
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Linq.Grouping`2.GetEnumerator*
  commentId: Overload:System.Linq.Grouping`2.GetEnumerator
  name: GetEnumerator
  nameWithType: Grouping<TKey, TElement>.GetEnumerator
  fullName: System.Linq.Grouping<TKey, TElement>.GetEnumerator
  nameWithType.vb: Grouping(Of TKey, TElement).GetEnumerator
  fullName.vb: System.Linq.Grouping(Of TKey, TElement).GetEnumerator
- uid: IEnumerator{{TElement}}
  commentId: '!:IEnumerator{`1}'
  definition: IEnumerator`1
  name: IEnumerator<TElement>
  nameWithType: IEnumerator<TElement>
  fullName: IEnumerator<TElement>
  nameWithType.vb: IEnumerator(Of TElement)
  fullName.vb: IEnumerator(Of TElement)
  name.vb: IEnumerator(Of TElement)
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerator`1
  isExternal: true
  name: IEnumerator<>
  nameWithType: IEnumerator<>
  fullName: IEnumerator<>
  nameWithType.vb: IEnumerator(Of )
  fullName.vb: IEnumerator(Of )
  name.vb: IEnumerator(Of )
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
