### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.ILGenerator
  commentId: T:System.Reflection.Emit.ILGenerator
  id: ILGenerator
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)
  - System.Reflection.Emit.ILGenerator.DefineLabel
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)
  - System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])
  - System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)
  langs:
  - csharp
  - vb
  name: ILGenerator
  nameWithType: ILGenerator
  fullName: System.Reflection.Emit.ILGenerator
  type: Class
  source:
    id: ILGenerator
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\ILGenerator.cs
    startLine: 8
  assemblies:
  - Runtime.OpenSilver
  namespace: System.Reflection.Emit
  summary: "\nGenerates Microsoft intermediate language (MSIL) instructions.\n"
  example: []
  syntax:
    content: >-
      [NotImplemented]

      public class ILGenerator
    content.vb: >-
      <NotImplemented>

      Public Class ILGenerator
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)
  id: Emit(System.Reflection.Emit.OpCode)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode)
  nameWithType: ILGenerator.Emit(OpCode)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)
  type: Method
  source:
    id: Emit
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\ILGenerator.cs
    startLine: 17
  assemblies:
  - Runtime.OpenSilver
  namespace: System.Reflection.Emit
  summary: "\nPuts the specified instruction onto the stream of instructions.\n"
  example: []
  syntax:
    content: >-
      [NotImplemented]

      public virtual void Emit(OpCode opcode)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: "\nThe Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.\n"
    content.vb: >-
      <NotImplemented>

      Public Overridable Sub Emit(opcode As OpCode)
  overload: System.Reflection.Emit.ILGenerator.Emit*
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, FieldInfo)
  nameWithType: ILGenerator.Emit(OpCode, FieldInfo)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.FieldInfo)
  type: Method
  source:
    id: Emit
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\ILGenerator.cs
    startLine: 31
  assemblies:
  - Runtime.OpenSilver
  namespace: System.Reflection.Emit
  summary: "\nPuts the specified instruction and metadata token for the specified field onto\n"
  example: []
  syntax:
    content: >-
      [NotImplemented]

      public virtual void Emit(OpCode opcode, FieldInfo field)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: "\nThe MSIL instruction to be emitted onto the stream.\n"
    - id: field
      type: System.Reflection.FieldInfo
      description: "\nA field that is the target of opcode.\n"
    content.vb: >-
      <NotImplemented>

      Public Overridable Sub Emit(opcode As OpCode, field As FieldInfo)
  overload: System.Reflection.Emit.ILGenerator.Emit*
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)
  id: Emit(System.Reflection.Emit.OpCode,System.Single)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Single)
  nameWithType: ILGenerator.Emit(OpCode, Single)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Single)
  type: Method
  source:
    id: Emit
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\ILGenerator.cs
    startLine: 46
  assemblies:
  - Runtime.OpenSilver
  namespace: System.Reflection.Emit
  summary: "\nPuts the specified instruction and numerical argument onto the Microsoft intermediate\nlanguage (MSIL) stream of instructions.\n"
  example: []
  syntax:
    content: >-
      [NotImplemented]

      public virtual void Emit(OpCode opcode, float arg)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: "\nThe MSIL instruction to be put onto the stream.\n"
    - id: arg
      type: System.Single
      description: "\nThe Single argument pushed onto the stream immediately after the instruction.\n"
    content.vb: >-
      <NotImplemented>

      Public Overridable Sub Emit(opcode As OpCode, arg As Single)
  overload: System.Reflection.Emit.ILGenerator.Emit*
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)
  id: Emit(System.Reflection.Emit.OpCode,System.Byte)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Byte)
  nameWithType: ILGenerator.Emit(OpCode, Byte)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Byte)
  type: Method
  source:
    id: Emit
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\ILGenerator.cs
    startLine: 62
  assemblies:
  - Runtime.OpenSilver
  namespace: System.Reflection.Emit
  summary: "\nPuts the specified instruction and character argument onto the Microsoft intermediate\nlanguage (MSIL) stream of instructions.\n"
  example: []
  syntax:
    content: >-
      [NotImplemented]

      public virtual void Emit(OpCode opcode, byte arg)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: "\nThe MSIL instruction to be put onto the stream.\n"
    - id: arg
      type: System.Byte
      description: "\nThe character argument pushed onto the stream immediately after the instruction.\n"
    content.vb: >-
      <NotImplemented>

      Public Overridable Sub Emit(opcode As OpCode, arg As Byte)
  overload: System.Reflection.Emit.ILGenerator.Emit*
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)
  id: Emit(System.Reflection.Emit.OpCode,System.SByte)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, SByte)
  nameWithType: ILGenerator.Emit(OpCode, SByte)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.SByte)
  type: Method
  source:
    id: Emit
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\ILGenerator.cs
    startLine: 77
  assemblies:
  - Runtime.OpenSilver
  namespace: System.Reflection.Emit
  summary: "\nPuts the specified instruction and character argument onto the Microsoft intermediate\nlanguage (MSIL) stream of instructions.\n"
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      [NotImplemented]

      public void Emit(OpCode opcode, sbyte arg)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: "\nThe MSIL instruction to be put onto the stream.\n"
    - id: arg
      type: System.SByte
      description: "\nThe character argument pushed onto the stream immediately after the instruction.\n"
    content.vb: >-
      <CLSCompliant(False)>

      <NotImplemented>

      Public Sub Emit(opcode As OpCode, arg As SByte)
  overload: System.Reflection.Emit.ILGenerator.Emit*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)
  id: Emit(System.Reflection.Emit.OpCode,System.Int16)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Int16)
  nameWithType: ILGenerator.Emit(OpCode, Int16)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Int16)
  type: Method
  source:
    id: Emit
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\ILGenerator.cs
    startLine: 93
  assemblies:
  - Runtime.OpenSilver
  namespace: System.Reflection.Emit
  summary: "\nPuts the specified instruction and numerical argument onto the Microsoft intermediate\nlanguage (MSIL) stream of instructions.\n"
  example: []
  syntax:
    content: >-
      [NotImplemented]

      public virtual void Emit(OpCode opcode, short arg)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: "\nThe MSIL instruction to be emitted onto the stream.\n"
    - id: arg
      type: System.Int16
      description: "\nThe Int argument pushed onto the stream immediately after the instruction.\n"
    content.vb: >-
      <NotImplemented>

      Public Overridable Sub Emit(opcode As OpCode, arg As Short)
  overload: System.Reflection.Emit.ILGenerator.Emit*
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, MethodInfo)
  nameWithType: ILGenerator.Emit(OpCode, MethodInfo)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo)
  type: Method
  source:
    id: Emit
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\ILGenerator.cs
    startLine: 115
  assemblies:
  - Runtime.OpenSilver
  namespace: System.Reflection.Emit
  summary: "\nPuts the specified instruction onto the Microsoft intermediate language (MSIL)\nstream followed by the metadata token for the given method.\n"
  example: []
  syntax:
    content: >-
      [NotImplemented]

      public virtual void Emit(OpCode opcode, MethodInfo meth)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: "\nThe MSIL instruction to be emitted onto the stream.\n"
    - id: meth
      type: System.Reflection.MethodInfo
      description: "\nA method that is the target of opcode.\n"
    content.vb: >-
      <NotImplemented>

      Public Overridable Sub Emit(opcode As OpCode, meth As MethodInfo)
  overload: System.Reflection.Emit.ILGenerator.Emit*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nmeth is null.\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nmeth is a generic method for which the <xref href=\"System.Reflection.MethodBase.IsGenericMethodDefinition\" data-throw-if-not-resolved=\"false\"></xref>\nproperty is false.\n"
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)
  id: Emit(System.Reflection.Emit.OpCode,System.Type)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Type)
  nameWithType: ILGenerator.Emit(OpCode, Type)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Type)
  type: Method
  source:
    id: Emit
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\ILGenerator.cs
    startLine: 134
  assemblies:
  - Runtime.OpenSilver
  namespace: System.Reflection.Emit
  summary: "\nPuts the specified instruction onto the Microsoft intermediate language (MSIL)\nstream followed by the metadata token for the given type.\n"
  example: []
  syntax:
    content: >-
      [NotImplemented]

      public virtual void Emit(OpCode opcode, Type cls)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: "\nThe MSIL instruction to be put onto the stream.\n"
    - id: cls
      type: System.Type
      description: "\nThe type that is the target of opcode.\n"
    content.vb: >-
      <NotImplemented>

      Public Overridable Sub Emit(opcode As OpCode, cls As Type)
  overload: System.Reflection.Emit.ILGenerator.Emit*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\ncls is null.\n"
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, LocalBuilder)
  nameWithType: ILGenerator.Emit(OpCode, LocalBuilder)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.LocalBuilder)
  type: Method
  source:
    id: Emit
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\ILGenerator.cs
    startLine: 161
  assemblies:
  - Runtime.OpenSilver
  namespace: System.Reflection.Emit
  summary: "\nPuts the specified instruction onto the Microsoft intermediate language (MSIL)\nstream followed by the index of the given local variable.\n"
  example: []
  syntax:
    content: >-
      [NotImplemented]

      public virtual void Emit(OpCode opcode, LocalBuilder local)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: "\nThe MSIL instruction to be emitted onto the stream.\n"
    - id: local
      type: System.Reflection.Emit.LocalBuilder
      description: "\nA local variable.\n"
    content.vb: >-
      <NotImplemented>

      Public Overridable Sub Emit(opcode As OpCode, local As LocalBuilder)
  overload: System.Reflection.Emit.ILGenerator.Emit*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe parent method of the local parameter does not match the method associated\nwith this <xref href=\"System.Reflection.Emit.ILGenerator\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nlocal is null.\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nopcode is a single-byte instruction, and local represents a local variable with\nan index greater than <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Label)
  nameWithType: ILGenerator.Emit(OpCode, Label)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.Label)
  type: Method
  source:
    id: Emit
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\ILGenerator.cs
    startLine: 176
  assemblies:
  - Runtime.OpenSilver
  namespace: System.Reflection.Emit
  summary: "\nPuts the specified instruction onto the Microsoft intermediate language (MSIL)\nstream and leaves space to include a label when fixes are done.\n"
  example: []
  syntax:
    content: >-
      [NotImplemented]

      public virtual void Emit(OpCode opcode, Label label)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: "\nThe MSIL instruction to be emitted onto the stream.\n"
    - id: label
      type: System.Reflection.Emit.Label
      description: "\nThe label to branch to.\n"
    content.vb: >-
      <NotImplemented>

      Public Overridable Sub Emit(opcode As OpCode, label As Label)
  overload: System.Reflection.Emit.ILGenerator.Emit*
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)
  commentId: M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)
  id: DeclareLocal(System.Type)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: DeclareLocal(Type)
  nameWithType: ILGenerator.DeclareLocal(Type)
  fullName: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)
  type: Method
  source:
    id: DeclareLocal
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\ILGenerator.cs
    startLine: 197
  assemblies:
  - Runtime.OpenSilver
  namespace: System.Reflection.Emit
  summary: "\nDeclares a local variable of the specified type.\n"
  example: []
  syntax:
    content: >-
      [NotImplemented]

      public virtual LocalBuilder DeclareLocal(Type localType)
    parameters:
    - id: localType
      type: System.Type
      description: "\nThe type of the local variable.\n"
    return:
      type: System.Reflection.Emit.LocalBuilder
      description: "\nThe declared local variable.\n"
    content.vb: >-
      <NotImplemented>

      Public Overridable Function DeclareLocal(localType As Type) As LocalBuilder
  overload: System.Reflection.Emit.ILGenerator.DeclareLocal*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nlocalType is null.\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe containing type has been created by the <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\" data-throw-if-not-resolved=\"false\"></xref>\nmethod.\n"
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.DefineLabel
  commentId: M:System.Reflection.Emit.ILGenerator.DefineLabel
  id: DefineLabel
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: DefineLabel()
  nameWithType: ILGenerator.DefineLabel()
  fullName: System.Reflection.Emit.ILGenerator.DefineLabel()
  type: Method
  source:
    id: DefineLabel
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\ILGenerator.cs
    startLine: 209
  assemblies:
  - Runtime.OpenSilver
  namespace: System.Reflection.Emit
  summary: "\nDeclares a new label.\n"
  example: []
  syntax:
    content: >-
      [NotImplemented]

      public virtual Label DefineLabel()
    return:
      type: System.Reflection.Emit.Label
      description: "\nA new label that can be used as a token for branching.\n"
    content.vb: >-
      <NotImplemented>

      Public Overridable Function DefineLabel As Label
  overload: System.Reflection.Emit.ILGenerator.DefineLabel*
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)
  commentId: M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)
  id: MarkLabel(System.Reflection.Emit.Label)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: MarkLabel(Label)
  nameWithType: ILGenerator.MarkLabel(Label)
  fullName: System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)
  type: Method
  source:
    id: MarkLabel
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\ILGenerator.cs
    startLine: 226
  assemblies:
  - Runtime.OpenSilver
  namespace: System.Reflection.Emit
  summary: "\nMarks the Microsoft intermediate language (MSIL) stream&apos;s current position with\nthe given label.\n"
  example: []
  syntax:
    content: >-
      [NotImplemented]

      public virtual void MarkLabel(Label loc)
    parameters:
    - id: loc
      type: System.Reflection.Emit.Label
      description: "\nThe label for which to set an index.\n"
    content.vb: >-
      <NotImplemented>

      Public Overridable Sub MarkLabel(loc As Label)
  overload: System.Reflection.Emit.ILGenerator.MarkLabel*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nloc represents an invalid index into the label array.-or- An index for loc has\nalready been defined.\n"
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])
  commentId: M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])
  id: EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: EmitCall(OpCode, MethodInfo, Type[])
  nameWithType: ILGenerator.EmitCall(OpCode, MethodInfo, Type[])
  fullName: System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo, System.Type[])
  type: Method
  source:
    id: EmitCall
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\ILGenerator.cs
    startLine: 252
  assemblies:
  - Runtime.OpenSilver
  namespace: System.Reflection.Emit
  summary: "\nPuts a call or callvirt instruction onto the Microsoft intermediate language\n(MSIL) stream to call a varargs method.\n"
  example: []
  syntax:
    content: >-
      [NotImplemented]

      public virtual void EmitCall(OpCode opcode, MethodInfo methodInfo, Type[] optionalParameterTypes)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: "\nThe MSIL instruction to be emitted onto the stream. Must be <xref href=\"System.Reflection.Emit.OpCodes.Call\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"System.Reflection.Emit.OpCodes.Callvirt\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Reflection.Emit.OpCodes.Newobj\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    - id: methodInfo
      type: System.Reflection.MethodInfo
      description: "\nThe varargs method to be called.\n"
    - id: optionalParameterTypes
      type: System.Type[]
      description: "\nThe types of the optional arguments if the method is a varargs method; otherwise,\nnull.\n"
    content.vb: >-
      <NotImplemented>

      Public Overridable Sub EmitCall(opcode As OpCode, methodInfo As MethodInfo, optionalParameterTypes As Type())
  overload: System.Reflection.Emit.ILGenerator.EmitCall*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nopcode does not specify a method call.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nmethodInfo is null.\n"
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  nameWithType.vb: ILGenerator.EmitCall(OpCode, MethodInfo, Type())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo, System.Type())
  name.vb: EmitCall(OpCode, MethodInfo, Type())
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)
  id: Emit(System.Reflection.Emit.OpCode,System.String)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, String)
  nameWithType: ILGenerator.Emit(OpCode, String)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.String)
  type: Method
  source:
    id: Emit
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\ILGenerator.cs
    startLine: 267
  assemblies:
  - Runtime.OpenSilver
  namespace: System.Reflection.Emit
  summary: "\nPuts the specified instruction onto the Microsoft intermediate language (MSIL)\nstream followed by the metadata token for the given string.\n"
  example: []
  syntax:
    content: >-
      [NotImplemented]

      public virtual void Emit(OpCode opcode, string str)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: "\nThe MSIL instruction to be emitted onto the stream."
    - id: str
      type: System.String
      description: "\nThe string that is the target of opcode.\n"
    content.vb: >-
      <NotImplemented>

      Public Overridable Sub Emit(opcode As OpCode, str As String)
  overload: System.Reflection.Emit.ILGenerator.Emit*
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Reflection.Emit
  commentId: N:System.Reflection.Emit
  name: System.Reflection.Emit
  nameWithType: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: System.Reflection.Emit.ILGenerator.Emit*
  commentId: Overload:System.Reflection.Emit.ILGenerator.Emit
  name: Emit
  nameWithType: ILGenerator.Emit
  fullName: System.Reflection.Emit.ILGenerator.Emit
- uid: System.Reflection.Emit.OpCode
  commentId: T:System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: true
  name: OpCode
  nameWithType: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.Reflection.FieldInfo
  commentId: T:System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection
  commentId: N:System.Reflection
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.SByte
  commentId: T:System.SByte
  parent: System
  isExternal: true
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Reflection.MethodBase.IsGenericMethodDefinition
  commentId: P:System.Reflection.MethodBase.IsGenericMethodDefinition
  parent: System.Reflection.MethodBase
  isExternal: true
  name: IsGenericMethodDefinition
  nameWithType: MethodBase.IsGenericMethodDefinition
  fullName: System.Reflection.MethodBase.IsGenericMethodDefinition
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  isExternal: true
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.MethodBase
  commentId: T:System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: true
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.ILGenerator
  commentId: T:System.Reflection.Emit.ILGenerator
  parent: System.Reflection.Emit
  name: ILGenerator
  nameWithType: ILGenerator
  fullName: System.Reflection.Emit.ILGenerator
- uid: System.Byte.MaxValue
  commentId: F:System.Byte.MaxValue
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: true
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: System.Reflection.Emit.LocalBuilder
  commentId: T:System.Reflection.Emit.LocalBuilder
  parent: System.Reflection.Emit
  name: LocalBuilder
  nameWithType: LocalBuilder
  fullName: System.Reflection.Emit.LocalBuilder
- uid: System.Reflection.Emit.Label
  commentId: T:System.Reflection.Emit.Label
  parent: System.Reflection.Emit
  name: Label
  nameWithType: Label
  fullName: System.Reflection.Emit.Label
- uid: System.Reflection.Emit.TypeBuilder.CreateType
  commentId: M:System.Reflection.Emit.TypeBuilder.CreateType
  isExternal: true
- uid: System.Reflection.Emit.ILGenerator.DeclareLocal*
  commentId: Overload:System.Reflection.Emit.ILGenerator.DeclareLocal
  name: DeclareLocal
  nameWithType: ILGenerator.DeclareLocal
  fullName: System.Reflection.Emit.ILGenerator.DeclareLocal
- uid: System.Reflection.Emit.ILGenerator.DefineLabel*
  commentId: Overload:System.Reflection.Emit.ILGenerator.DefineLabel
  name: DefineLabel
  nameWithType: ILGenerator.DefineLabel
  fullName: System.Reflection.Emit.ILGenerator.DefineLabel
- uid: System.Reflection.Emit.ILGenerator.MarkLabel*
  commentId: Overload:System.Reflection.Emit.ILGenerator.MarkLabel
  name: MarkLabel
  nameWithType: ILGenerator.MarkLabel
  fullName: System.Reflection.Emit.ILGenerator.MarkLabel
- uid: System.Reflection.Emit.OpCodes.Call
  commentId: F:System.Reflection.Emit.OpCodes.Call
  isExternal: true
- uid: System.Reflection.Emit.OpCodes.Callvirt
  commentId: F:System.Reflection.Emit.OpCodes.Callvirt
  isExternal: true
- uid: System.Reflection.Emit.OpCodes.Newobj
  commentId: F:System.Reflection.Emit.OpCodes.Newobj
  isExternal: true
- uid: System.Reflection.Emit.ILGenerator.EmitCall*
  commentId: Overload:System.Reflection.Emit.ILGenerator.EmitCall
  name: EmitCall
  nameWithType: ILGenerator.EmitCall
  fullName: System.Reflection.Emit.ILGenerator.EmitCall
- uid: System.Type[]
  isExternal: true
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
