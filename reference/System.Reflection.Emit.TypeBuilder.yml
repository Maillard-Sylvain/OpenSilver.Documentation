### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.TypeBuilder
  commentId: T:System.Reflection.Emit.TypeBuilder
  id: TypeBuilder
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.TypeBuilder.Assembly
  - System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName
  - System.Reflection.Emit.TypeBuilder.BaseType
  - System.Reflection.Emit.TypeBuilder.CreateType
  - System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(MethodAttributes)
  - System.Reflection.Emit.TypeBuilder.DefineField(System.String,Type,FieldAttributes)
  - System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,MethodAttributes,CallingConventions,Type,Type[])
  - System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,MethodAttributes,Type,Type[])
  - System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,PropertyAttributes,Type,Type[])
  - System.Reflection.Emit.TypeBuilder.FullName
  - System.Reflection.Emit.TypeBuilder.GetAttributeFlagsImpl
  - System.Reflection.Emit.TypeBuilder.GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  - System.Reflection.Emit.TypeBuilder.GetConstructors(BindingFlags)
  - System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)
  - System.Reflection.Emit.TypeBuilder.GetCustomAttributes(Type,System.Boolean)
  - System.Reflection.Emit.TypeBuilder.GetElementType
  - System.Reflection.Emit.TypeBuilder.GetEvent(System.String,BindingFlags)
  - System.Reflection.Emit.TypeBuilder.GetEvents(BindingFlags)
  - System.Reflection.Emit.TypeBuilder.GetField(System.String,BindingFlags)
  - System.Reflection.Emit.TypeBuilder.GetFields(BindingFlags)
  - System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)
  - System.Reflection.Emit.TypeBuilder.GetInterfaces
  - System.Reflection.Emit.TypeBuilder.GetMembers(BindingFlags)
  - System.Reflection.Emit.TypeBuilder.GetMethodImpl(System.String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  - System.Reflection.Emit.TypeBuilder.GetMethods(BindingFlags)
  - System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,BindingFlags)
  - System.Reflection.Emit.TypeBuilder.GetNestedTypes(BindingFlags)
  - System.Reflection.Emit.TypeBuilder.GetProperties(BindingFlags)
  - System.Reflection.Emit.TypeBuilder.GetPropertyImpl(System.String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  - System.Reflection.Emit.TypeBuilder.GUID
  - System.Reflection.Emit.TypeBuilder.HasElementTypeImpl
  - System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,BindingFlags,Binder,System.Object,System.Object[],ParameterModifier[],CultureInfo,System.String[])
  - System.Reflection.Emit.TypeBuilder.IsArrayImpl
  - System.Reflection.Emit.TypeBuilder.IsByRefImpl
  - System.Reflection.Emit.TypeBuilder.IsCOMObjectImpl
  - System.Reflection.Emit.TypeBuilder.IsDefined(Type,System.Boolean)
  - System.Reflection.Emit.TypeBuilder.IsPointerImpl
  - System.Reflection.Emit.TypeBuilder.IsPrimitiveImpl
  - System.Reflection.Emit.TypeBuilder.Module
  - System.Reflection.Emit.TypeBuilder.Name
  - System.Reflection.Emit.TypeBuilder.Namespace
  - System.Reflection.Emit.TypeBuilder.UnderlyingSystemType
  langs:
  - csharp
  - vb
  name: TypeBuilder
  nameWithType: TypeBuilder
  fullName: System.Reflection.Emit.TypeBuilder
  type: Class
  source:
    id: TypeBuilder
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 7
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: 'public sealed class TypeBuilder : Type'
    content.vb: >-
      Public NotInheritable Class TypeBuilder
          Inherits Type
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Reflection.Emit.TypeBuilder.Assembly
  commentId: P:System.Reflection.Emit.TypeBuilder.Assembly
  id: Assembly
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: Assembly
  nameWithType: TypeBuilder.Assembly
  fullName: System.Reflection.Emit.TypeBuilder.Assembly
  type: Property
  source:
    id: Assembly
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 10
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override Assembly Assembly { get; }
    parameters: []
    return:
      type: Assembly
    content.vb: Public Overrides ReadOnly Property Assembly As Assembly
  overload: System.Reflection.Emit.TypeBuilder.Assembly*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName
  commentId: P:System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName
  id: AssemblyQualifiedName
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: AssemblyQualifiedName
  nameWithType: TypeBuilder.AssemblyQualifiedName
  fullName: System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName
  type: Property
  source:
    id: AssemblyQualifiedName
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 13
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override string AssemblyQualifiedName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overrides ReadOnly Property AssemblyQualifiedName As String
  overload: System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.TypeBuilder.BaseType
  commentId: P:System.Reflection.Emit.TypeBuilder.BaseType
  id: BaseType
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: BaseType
  nameWithType: TypeBuilder.BaseType
  fullName: System.Reflection.Emit.TypeBuilder.BaseType
  type: Property
  source:
    id: BaseType
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 16
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override Type BaseType { get; }
    parameters: []
    return:
      type: Type
    content.vb: Public Overrides ReadOnly Property BaseType As Type
  overload: System.Reflection.Emit.TypeBuilder.BaseType*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.TypeBuilder.FullName
  commentId: P:System.Reflection.Emit.TypeBuilder.FullName
  id: FullName
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: FullName
  nameWithType: TypeBuilder.FullName
  fullName: System.Reflection.Emit.TypeBuilder.FullName
  type: Property
  source:
    id: FullName
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 19
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override string FullName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overrides ReadOnly Property FullName As String
  overload: System.Reflection.Emit.TypeBuilder.FullName*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.TypeBuilder.GUID
  commentId: P:System.Reflection.Emit.TypeBuilder.GUID
  id: GUID
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: GUID
  nameWithType: TypeBuilder.GUID
  fullName: System.Reflection.Emit.TypeBuilder.GUID
  type: Property
  source:
    id: GUID
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 22
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override Guid GUID { get; }
    parameters: []
    return:
      type: Guid
    content.vb: Public Overrides ReadOnly Property GUID As Guid
  overload: System.Reflection.Emit.TypeBuilder.GUID*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.TypeBuilder.Module
  commentId: P:System.Reflection.Emit.TypeBuilder.Module
  id: Module
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: Module
  nameWithType: TypeBuilder.Module
  fullName: System.Reflection.Emit.TypeBuilder.Module
  type: Property
  source:
    id: Module
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 25
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override Module Module { get; }
    parameters: []
    return:
      type: Module
    content.vb: 'Public Overrides ReadOnly Property Module As '
  overload: System.Reflection.Emit.TypeBuilder.Module*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.TypeBuilder.Namespace
  commentId: P:System.Reflection.Emit.TypeBuilder.Namespace
  id: Namespace
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: Namespace
  nameWithType: TypeBuilder.Namespace
  fullName: System.Reflection.Emit.TypeBuilder.Namespace
  type: Property
  source:
    id: Namespace
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 28
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override string Namespace { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overrides ReadOnly Property Namespace As String
  overload: System.Reflection.Emit.TypeBuilder.Namespace*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.TypeBuilder.UnderlyingSystemType
  commentId: P:System.Reflection.Emit.TypeBuilder.UnderlyingSystemType
  id: UnderlyingSystemType
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: UnderlyingSystemType
  nameWithType: TypeBuilder.UnderlyingSystemType
  fullName: System.Reflection.Emit.TypeBuilder.UnderlyingSystemType
  type: Property
  source:
    id: UnderlyingSystemType
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 31
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override Type UnderlyingSystemType { get; }
    parameters: []
    return:
      type: Type
    content.vb: Public Overrides ReadOnly Property UnderlyingSystemType As Type
  overload: System.Reflection.Emit.TypeBuilder.UnderlyingSystemType*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.TypeBuilder.Name
  commentId: P:System.Reflection.Emit.TypeBuilder.Name
  id: Name
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: TypeBuilder.Name
  fullName: System.Reflection.Emit.TypeBuilder.Name
  type: Property
  source:
    id: Name
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 34
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overrides ReadOnly Property Name As String
  overload: System.Reflection.Emit.TypeBuilder.Name*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.TypeBuilder.GetConstructors(BindingFlags)
  commentId: M:System.Reflection.Emit.TypeBuilder.GetConstructors(BindingFlags)
  id: GetConstructors(BindingFlags)
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: GetConstructors(BindingFlags)
  nameWithType: TypeBuilder.GetConstructors(BindingFlags)
  fullName: System.Reflection.Emit.TypeBuilder.GetConstructors(BindingFlags)
  type: Method
  source:
    id: GetConstructors
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 37
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr)
    parameters:
    - id: bindingAttr
      type: BindingFlags
    return:
      type: ConstructorInfo[]
    content.vb: Public Overrides Function GetConstructors(bindingAttr As BindingFlags) As ConstructorInfo()
  overload: System.Reflection.Emit.TypeBuilder.GetConstructors*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)
  commentId: M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)
  id: GetCustomAttributes(System.Boolean)
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: GetCustomAttributes(Boolean)
  nameWithType: TypeBuilder.GetCustomAttributes(Boolean)
  fullName: System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)
  type: Method
  source:
    id: GetCustomAttributes
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 43
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override object[] GetCustomAttributes(bool inherit)
    parameters:
    - id: inherit
      type: System.Boolean
    return:
      type: System.Object[]
    content.vb: Public Overrides Function GetCustomAttributes(inherit As Boolean) As Object()
  overload: System.Reflection.Emit.TypeBuilder.GetCustomAttributes*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.TypeBuilder.GetCustomAttributes(Type,System.Boolean)
  commentId: M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(Type,System.Boolean)
  id: GetCustomAttributes(Type,System.Boolean)
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: GetCustomAttributes(Type, Boolean)
  nameWithType: TypeBuilder.GetCustomAttributes(Type, Boolean)
  fullName: System.Reflection.Emit.TypeBuilder.GetCustomAttributes(Type, System.Boolean)
  type: Method
  source:
    id: GetCustomAttributes
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 49
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override object[] GetCustomAttributes(Type attributeType, bool inherit)
    parameters:
    - id: attributeType
      type: Type
    - id: inherit
      type: System.Boolean
    return:
      type: System.Object[]
    content.vb: Public Overrides Function GetCustomAttributes(attributeType As Type, inherit As Boolean) As Object()
  overload: System.Reflection.Emit.TypeBuilder.GetCustomAttributes*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.TypeBuilder.GetElementType
  commentId: M:System.Reflection.Emit.TypeBuilder.GetElementType
  id: GetElementType
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: GetElementType()
  nameWithType: TypeBuilder.GetElementType()
  fullName: System.Reflection.Emit.TypeBuilder.GetElementType()
  type: Method
  source:
    id: GetElementType
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 55
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override Type GetElementType()
    return:
      type: Type
    content.vb: Public Overrides Function GetElementType As Type
  overload: System.Reflection.Emit.TypeBuilder.GetElementType*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.TypeBuilder.GetEvent(System.String,BindingFlags)
  commentId: M:System.Reflection.Emit.TypeBuilder.GetEvent(System.String,BindingFlags)
  id: GetEvent(System.String,BindingFlags)
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: GetEvent(String, BindingFlags)
  nameWithType: TypeBuilder.GetEvent(String, BindingFlags)
  fullName: System.Reflection.Emit.TypeBuilder.GetEvent(System.String, BindingFlags)
  type: Method
  source:
    id: GetEvent
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 61
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override EventInfo GetEvent(string name, BindingFlags bindingAttr)
    parameters:
    - id: name
      type: System.String
    - id: bindingAttr
      type: BindingFlags
    return:
      type: EventInfo
    content.vb: Public Overrides Function GetEvent(name As String, bindingAttr As BindingFlags) As EventInfo
  overload: System.Reflection.Emit.TypeBuilder.GetEvent*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.TypeBuilder.GetEvents(BindingFlags)
  commentId: M:System.Reflection.Emit.TypeBuilder.GetEvents(BindingFlags)
  id: GetEvents(BindingFlags)
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: GetEvents(BindingFlags)
  nameWithType: TypeBuilder.GetEvents(BindingFlags)
  fullName: System.Reflection.Emit.TypeBuilder.GetEvents(BindingFlags)
  type: Method
  source:
    id: GetEvents
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 67
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override EventInfo[] GetEvents(BindingFlags bindingAttr)
    parameters:
    - id: bindingAttr
      type: BindingFlags
    return:
      type: EventInfo[]
    content.vb: Public Overrides Function GetEvents(bindingAttr As BindingFlags) As EventInfo()
  overload: System.Reflection.Emit.TypeBuilder.GetEvents*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.TypeBuilder.GetField(System.String,BindingFlags)
  commentId: M:System.Reflection.Emit.TypeBuilder.GetField(System.String,BindingFlags)
  id: GetField(System.String,BindingFlags)
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: GetField(String, BindingFlags)
  nameWithType: TypeBuilder.GetField(String, BindingFlags)
  fullName: System.Reflection.Emit.TypeBuilder.GetField(System.String, BindingFlags)
  type: Method
  source:
    id: GetField
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 73
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override FieldInfo GetField(string name, BindingFlags bindingAttr)
    parameters:
    - id: name
      type: System.String
    - id: bindingAttr
      type: BindingFlags
    return:
      type: FieldInfo
    content.vb: Public Overrides Function GetField(name As String, bindingAttr As BindingFlags) As FieldInfo
  overload: System.Reflection.Emit.TypeBuilder.GetField*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.TypeBuilder.GetFields(BindingFlags)
  commentId: M:System.Reflection.Emit.TypeBuilder.GetFields(BindingFlags)
  id: GetFields(BindingFlags)
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: GetFields(BindingFlags)
  nameWithType: TypeBuilder.GetFields(BindingFlags)
  fullName: System.Reflection.Emit.TypeBuilder.GetFields(BindingFlags)
  type: Method
  source:
    id: GetFields
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 79
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override FieldInfo[] GetFields(BindingFlags bindingAttr)
    parameters:
    - id: bindingAttr
      type: BindingFlags
    return:
      type: FieldInfo[]
    content.vb: Public Overrides Function GetFields(bindingAttr As BindingFlags) As FieldInfo()
  overload: System.Reflection.Emit.TypeBuilder.GetFields*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)
  commentId: M:System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)
  id: GetInterface(System.String,System.Boolean)
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: GetInterface(String, Boolean)
  nameWithType: TypeBuilder.GetInterface(String, Boolean)
  fullName: System.Reflection.Emit.TypeBuilder.GetInterface(System.String, System.Boolean)
  type: Method
  source:
    id: GetInterface
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 85
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override Type GetInterface(string name, bool ignoreCase)
    parameters:
    - id: name
      type: System.String
    - id: ignoreCase
      type: System.Boolean
    return:
      type: Type
    content.vb: Public Overrides Function GetInterface(name As String, ignoreCase As Boolean) As Type
  overload: System.Reflection.Emit.TypeBuilder.GetInterface*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.TypeBuilder.GetInterfaces
  commentId: M:System.Reflection.Emit.TypeBuilder.GetInterfaces
  id: GetInterfaces
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: GetInterfaces()
  nameWithType: TypeBuilder.GetInterfaces()
  fullName: System.Reflection.Emit.TypeBuilder.GetInterfaces()
  type: Method
  source:
    id: GetInterfaces
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 91
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override Type[] GetInterfaces()
    return:
      type: Type[]
    content.vb: Public Overrides Function GetInterfaces As Type()
  overload: System.Reflection.Emit.TypeBuilder.GetInterfaces*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.TypeBuilder.GetMembers(BindingFlags)
  commentId: M:System.Reflection.Emit.TypeBuilder.GetMembers(BindingFlags)
  id: GetMembers(BindingFlags)
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: GetMembers(BindingFlags)
  nameWithType: TypeBuilder.GetMembers(BindingFlags)
  fullName: System.Reflection.Emit.TypeBuilder.GetMembers(BindingFlags)
  type: Method
  source:
    id: GetMembers
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 97
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override MemberInfo[] GetMembers(BindingFlags bindingAttr)
    parameters:
    - id: bindingAttr
      type: BindingFlags
    return:
      type: MemberInfo[]
    content.vb: Public Overrides Function GetMembers(bindingAttr As BindingFlags) As MemberInfo()
  overload: System.Reflection.Emit.TypeBuilder.GetMembers*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.TypeBuilder.GetMethods(BindingFlags)
  commentId: M:System.Reflection.Emit.TypeBuilder.GetMethods(BindingFlags)
  id: GetMethods(BindingFlags)
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: GetMethods(BindingFlags)
  nameWithType: TypeBuilder.GetMethods(BindingFlags)
  fullName: System.Reflection.Emit.TypeBuilder.GetMethods(BindingFlags)
  type: Method
  source:
    id: GetMethods
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 103
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override MethodInfo[] GetMethods(BindingFlags bindingAttr)
    parameters:
    - id: bindingAttr
      type: BindingFlags
    return:
      type: MethodInfo[]
    content.vb: Public Overrides Function GetMethods(bindingAttr As BindingFlags) As MethodInfo()
  overload: System.Reflection.Emit.TypeBuilder.GetMethods*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,BindingFlags)
  commentId: M:System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,BindingFlags)
  id: GetNestedType(System.String,BindingFlags)
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: GetNestedType(String, BindingFlags)
  nameWithType: TypeBuilder.GetNestedType(String, BindingFlags)
  fullName: System.Reflection.Emit.TypeBuilder.GetNestedType(System.String, BindingFlags)
  type: Method
  source:
    id: GetNestedType
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 109
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override Type GetNestedType(string name, BindingFlags bindingAttr)
    parameters:
    - id: name
      type: System.String
    - id: bindingAttr
      type: BindingFlags
    return:
      type: Type
    content.vb: Public Overrides Function GetNestedType(name As String, bindingAttr As BindingFlags) As Type
  overload: System.Reflection.Emit.TypeBuilder.GetNestedType*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.TypeBuilder.GetNestedTypes(BindingFlags)
  commentId: M:System.Reflection.Emit.TypeBuilder.GetNestedTypes(BindingFlags)
  id: GetNestedTypes(BindingFlags)
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: GetNestedTypes(BindingFlags)
  nameWithType: TypeBuilder.GetNestedTypes(BindingFlags)
  fullName: System.Reflection.Emit.TypeBuilder.GetNestedTypes(BindingFlags)
  type: Method
  source:
    id: GetNestedTypes
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 115
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override Type[] GetNestedTypes(BindingFlags bindingAttr)
    parameters:
    - id: bindingAttr
      type: BindingFlags
    return:
      type: Type[]
    content.vb: Public Overrides Function GetNestedTypes(bindingAttr As BindingFlags) As Type()
  overload: System.Reflection.Emit.TypeBuilder.GetNestedTypes*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.TypeBuilder.GetProperties(BindingFlags)
  commentId: M:System.Reflection.Emit.TypeBuilder.GetProperties(BindingFlags)
  id: GetProperties(BindingFlags)
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: GetProperties(BindingFlags)
  nameWithType: TypeBuilder.GetProperties(BindingFlags)
  fullName: System.Reflection.Emit.TypeBuilder.GetProperties(BindingFlags)
  type: Method
  source:
    id: GetProperties
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 121
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override PropertyInfo[] GetProperties(BindingFlags bindingAttr)
    parameters:
    - id: bindingAttr
      type: BindingFlags
    return:
      type: PropertyInfo[]
    content.vb: Public Overrides Function GetProperties(bindingAttr As BindingFlags) As PropertyInfo()
  overload: System.Reflection.Emit.TypeBuilder.GetProperties*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,BindingFlags,Binder,System.Object,System.Object[],ParameterModifier[],CultureInfo,System.String[])
  commentId: M:System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,BindingFlags,Binder,System.Object,System.Object[],ParameterModifier[],CultureInfo,System.String[])
  id: InvokeMember(System.String,BindingFlags,Binder,System.Object,System.Object[],ParameterModifier[],CultureInfo,System.String[])
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])
  nameWithType: TypeBuilder.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])
  fullName: System.Reflection.Emit.TypeBuilder.InvokeMember(System.String, BindingFlags, Binder, System.Object, System.Object[], ParameterModifier[], CultureInfo, System.String[])
  type: Method
  source:
    id: InvokeMember
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 127
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters)
    parameters:
    - id: name
      type: System.String
    - id: invokeAttr
      type: BindingFlags
    - id: binder
      type: Binder
    - id: target
      type: System.Object
    - id: args
      type: System.Object[]
    - id: modifiers
      type: ParameterModifier[]
    - id: culture
      type: CultureInfo
    - id: namedParameters
      type: System.String[]
    return:
      type: System.Object
    content.vb: Public Overrides Function InvokeMember(name As String, invokeAttr As BindingFlags, binder As Binder, target As Object, args As Object(), modifiers As ParameterModifier(), culture As CultureInfo, namedParameters As String()) As Object
  overload: System.Reflection.Emit.TypeBuilder.InvokeMember*
  nameWithType.vb: TypeBuilder.InvokeMember(String, BindingFlags, Binder, Object, Object(), ParameterModifier(), CultureInfo, String())
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Reflection.Emit.TypeBuilder.InvokeMember(System.String, BindingFlags, Binder, System.Object, System.Object(), ParameterModifier(), CultureInfo, System.String())
  name.vb: InvokeMember(String, BindingFlags, Binder, Object, Object(), ParameterModifier(), CultureInfo, String())
- uid: System.Reflection.Emit.TypeBuilder.IsDefined(Type,System.Boolean)
  commentId: M:System.Reflection.Emit.TypeBuilder.IsDefined(Type,System.Boolean)
  id: IsDefined(Type,System.Boolean)
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: IsDefined(Type, Boolean)
  nameWithType: TypeBuilder.IsDefined(Type, Boolean)
  fullName: System.Reflection.Emit.TypeBuilder.IsDefined(Type, System.Boolean)
  type: Method
  source:
    id: IsDefined
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 133
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public override bool IsDefined(Type attributeType, bool inherit)
    parameters:
    - id: attributeType
      type: Type
    - id: inherit
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: Public Overrides Function IsDefined(attributeType As Type, inherit As Boolean) As Boolean
  overload: System.Reflection.Emit.TypeBuilder.IsDefined*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.TypeBuilder.GetAttributeFlagsImpl
  commentId: M:System.Reflection.Emit.TypeBuilder.GetAttributeFlagsImpl
  id: GetAttributeFlagsImpl
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: GetAttributeFlagsImpl()
  nameWithType: TypeBuilder.GetAttributeFlagsImpl()
  fullName: System.Reflection.Emit.TypeBuilder.GetAttributeFlagsImpl()
  type: Method
  source:
    id: GetAttributeFlagsImpl
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 139
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: protected override TypeAttributes GetAttributeFlagsImpl()
    return:
      type: TypeAttributes
    content.vb: Protected Overrides Function GetAttributeFlagsImpl As TypeAttributes
  overload: System.Reflection.Emit.TypeBuilder.GetAttributeFlagsImpl*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Reflection.Emit.TypeBuilder.GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  commentId: M:System.Reflection.Emit.TypeBuilder.GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  id: GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  nameWithType: TypeBuilder.GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  fullName: System.Reflection.Emit.TypeBuilder.GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  type: Method
  source:
    id: GetConstructorImpl
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 145
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)
    parameters:
    - id: bindingAttr
      type: BindingFlags
    - id: binder
      type: Binder
    - id: callConvention
      type: CallingConventions
    - id: types
      type: Type[]
    - id: modifiers
      type: ParameterModifier[]
    return:
      type: ConstructorInfo
    content.vb: Protected Overrides Function GetConstructorImpl(bindingAttr As BindingFlags, binder As Binder, callConvention As CallingConventions, types As Type(), modifiers As ParameterModifier()) As ConstructorInfo
  overload: System.Reflection.Emit.TypeBuilder.GetConstructorImpl*
  nameWithType.vb: TypeBuilder.GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type(), ParameterModifier())
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: System.Reflection.Emit.TypeBuilder.GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type(), ParameterModifier())
  name.vb: GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type(), ParameterModifier())
- uid: System.Reflection.Emit.TypeBuilder.GetMethodImpl(System.String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  commentId: M:System.Reflection.Emit.TypeBuilder.GetMethodImpl(System.String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  id: GetMethodImpl(System.String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  nameWithType: TypeBuilder.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  fullName: System.Reflection.Emit.TypeBuilder.GetMethodImpl(System.String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  type: Method
  source:
    id: GetMethodImpl
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 151
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)
    parameters:
    - id: name
      type: System.String
    - id: bindingAttr
      type: BindingFlags
    - id: binder
      type: Binder
    - id: callConvention
      type: CallingConventions
    - id: types
      type: Type[]
    - id: modifiers
      type: ParameterModifier[]
    return:
      type: MethodInfo
    content.vb: Protected Overrides Function GetMethodImpl(name As String, bindingAttr As BindingFlags, binder As Binder, callConvention As CallingConventions, types As Type(), modifiers As ParameterModifier()) As MethodInfo
  overload: System.Reflection.Emit.TypeBuilder.GetMethodImpl*
  nameWithType.vb: TypeBuilder.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type(), ParameterModifier())
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: System.Reflection.Emit.TypeBuilder.GetMethodImpl(System.String, BindingFlags, Binder, CallingConventions, Type(), ParameterModifier())
  name.vb: GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type(), ParameterModifier())
- uid: System.Reflection.Emit.TypeBuilder.GetPropertyImpl(System.String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  commentId: M:System.Reflection.Emit.TypeBuilder.GetPropertyImpl(System.String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  id: GetPropertyImpl(System.String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])
  nameWithType: TypeBuilder.GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])
  fullName: System.Reflection.Emit.TypeBuilder.GetPropertyImpl(System.String, BindingFlags, Binder, Type, Type[], ParameterModifier[])
  type: Method
  source:
    id: GetPropertyImpl
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 157
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers)
    parameters:
    - id: name
      type: System.String
    - id: bindingAttr
      type: BindingFlags
    - id: binder
      type: Binder
    - id: returnType
      type: Type
    - id: types
      type: Type[]
    - id: modifiers
      type: ParameterModifier[]
    return:
      type: PropertyInfo
    content.vb: Protected Overrides Function GetPropertyImpl(name As String, bindingAttr As BindingFlags, binder As Binder, returnType As Type, types As Type(), modifiers As ParameterModifier()) As PropertyInfo
  overload: System.Reflection.Emit.TypeBuilder.GetPropertyImpl*
  nameWithType.vb: TypeBuilder.GetPropertyImpl(String, BindingFlags, Binder, Type, Type(), ParameterModifier())
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: System.Reflection.Emit.TypeBuilder.GetPropertyImpl(System.String, BindingFlags, Binder, Type, Type(), ParameterModifier())
  name.vb: GetPropertyImpl(String, BindingFlags, Binder, Type, Type(), ParameterModifier())
- uid: System.Reflection.Emit.TypeBuilder.HasElementTypeImpl
  commentId: M:System.Reflection.Emit.TypeBuilder.HasElementTypeImpl
  id: HasElementTypeImpl
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: HasElementTypeImpl()
  nameWithType: TypeBuilder.HasElementTypeImpl()
  fullName: System.Reflection.Emit.TypeBuilder.HasElementTypeImpl()
  type: Method
  source:
    id: HasElementTypeImpl
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 163
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: protected override bool HasElementTypeImpl()
    return:
      type: System.Boolean
    content.vb: Protected Overrides Function HasElementTypeImpl As Boolean
  overload: System.Reflection.Emit.TypeBuilder.HasElementTypeImpl*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Reflection.Emit.TypeBuilder.IsArrayImpl
  commentId: M:System.Reflection.Emit.TypeBuilder.IsArrayImpl
  id: IsArrayImpl
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: IsArrayImpl()
  nameWithType: TypeBuilder.IsArrayImpl()
  fullName: System.Reflection.Emit.TypeBuilder.IsArrayImpl()
  type: Method
  source:
    id: IsArrayImpl
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 169
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: protected override bool IsArrayImpl()
    return:
      type: System.Boolean
    content.vb: Protected Overrides Function IsArrayImpl As Boolean
  overload: System.Reflection.Emit.TypeBuilder.IsArrayImpl*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Reflection.Emit.TypeBuilder.IsByRefImpl
  commentId: M:System.Reflection.Emit.TypeBuilder.IsByRefImpl
  id: IsByRefImpl
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: IsByRefImpl()
  nameWithType: TypeBuilder.IsByRefImpl()
  fullName: System.Reflection.Emit.TypeBuilder.IsByRefImpl()
  type: Method
  source:
    id: IsByRefImpl
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 175
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: protected override bool IsByRefImpl()
    return:
      type: System.Boolean
    content.vb: Protected Overrides Function IsByRefImpl As Boolean
  overload: System.Reflection.Emit.TypeBuilder.IsByRefImpl*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Reflection.Emit.TypeBuilder.IsCOMObjectImpl
  commentId: M:System.Reflection.Emit.TypeBuilder.IsCOMObjectImpl
  id: IsCOMObjectImpl
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: IsCOMObjectImpl()
  nameWithType: TypeBuilder.IsCOMObjectImpl()
  fullName: System.Reflection.Emit.TypeBuilder.IsCOMObjectImpl()
  type: Method
  source:
    id: IsCOMObjectImpl
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 181
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: protected override bool IsCOMObjectImpl()
    return:
      type: System.Boolean
    content.vb: Protected Overrides Function IsCOMObjectImpl As Boolean
  overload: System.Reflection.Emit.TypeBuilder.IsCOMObjectImpl*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Reflection.Emit.TypeBuilder.IsPointerImpl
  commentId: M:System.Reflection.Emit.TypeBuilder.IsPointerImpl
  id: IsPointerImpl
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: IsPointerImpl()
  nameWithType: TypeBuilder.IsPointerImpl()
  fullName: System.Reflection.Emit.TypeBuilder.IsPointerImpl()
  type: Method
  source:
    id: IsPointerImpl
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 187
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: protected override bool IsPointerImpl()
    return:
      type: System.Boolean
    content.vb: Protected Overrides Function IsPointerImpl As Boolean
  overload: System.Reflection.Emit.TypeBuilder.IsPointerImpl*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Reflection.Emit.TypeBuilder.IsPrimitiveImpl
  commentId: M:System.Reflection.Emit.TypeBuilder.IsPrimitiveImpl
  id: IsPrimitiveImpl
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: IsPrimitiveImpl()
  nameWithType: TypeBuilder.IsPrimitiveImpl()
  fullName: System.Reflection.Emit.TypeBuilder.IsPrimitiveImpl()
  type: Method
  source:
    id: IsPrimitiveImpl
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 193
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: protected override bool IsPrimitiveImpl()
    return:
      type: System.Boolean
    content.vb: Protected Overrides Function IsPrimitiveImpl As Boolean
  overload: System.Reflection.Emit.TypeBuilder.IsPrimitiveImpl*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Reflection.Emit.TypeBuilder.CreateType
  commentId: M:System.Reflection.Emit.TypeBuilder.CreateType
  id: CreateType
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: CreateType()
  nameWithType: TypeBuilder.CreateType()
  fullName: System.Reflection.Emit.TypeBuilder.CreateType()
  type: Method
  source:
    id: CreateType
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 199
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public Type CreateType()
    return:
      type: Type
    content.vb: Public Function CreateType As Type
  overload: System.Reflection.Emit.TypeBuilder.CreateType*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.TypeBuilder.DefineField(System.String,Type,FieldAttributes)
  commentId: M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,Type,FieldAttributes)
  id: DefineField(System.String,Type,FieldAttributes)
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: DefineField(String, Type, FieldAttributes)
  nameWithType: TypeBuilder.DefineField(String, Type, FieldAttributes)
  fullName: System.Reflection.Emit.TypeBuilder.DefineField(System.String, Type, FieldAttributes)
  type: Method
  source:
    id: DefineField
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 205
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public FieldBuilder DefineField(string fieldName, Type type, FieldAttributes attributes)
    parameters:
    - id: fieldName
      type: System.String
    - id: type
      type: Type
    - id: attributes
      type: FieldAttributes
    return:
      type: System.Reflection.Emit.FieldBuilder
    content.vb: Public Function DefineField(fieldName As String, type As Type, attributes As FieldAttributes) As FieldBuilder
  overload: System.Reflection.Emit.TypeBuilder.DefineField*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,PropertyAttributes,Type,Type[])
  commentId: M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,PropertyAttributes,Type,Type[])
  id: DefineProperty(System.String,PropertyAttributes,Type,Type[])
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: DefineProperty(String, PropertyAttributes, Type, Type[])
  nameWithType: TypeBuilder.DefineProperty(String, PropertyAttributes, Type, Type[])
  fullName: System.Reflection.Emit.TypeBuilder.DefineProperty(System.String, PropertyAttributes, Type, Type[])
  type: Method
  source:
    id: DefineProperty
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 211
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, Type returnType, Type[] parameterTypes)
    parameters:
    - id: name
      type: System.String
    - id: attributes
      type: PropertyAttributes
    - id: returnType
      type: Type
    - id: parameterTypes
      type: Type[]
    return:
      type: System.Reflection.Emit.PropertyBuilder
    content.vb: Public Function DefineProperty(name As String, attributes As PropertyAttributes, returnType As Type, parameterTypes As Type()) As PropertyBuilder
  overload: System.Reflection.Emit.TypeBuilder.DefineProperty*
  nameWithType.vb: TypeBuilder.DefineProperty(String, PropertyAttributes, Type, Type())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.TypeBuilder.DefineProperty(System.String, PropertyAttributes, Type, Type())
  name.vb: DefineProperty(String, PropertyAttributes, Type, Type())
- uid: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,MethodAttributes,Type,Type[])
  commentId: M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,MethodAttributes,Type,Type[])
  id: DefineMethod(System.String,MethodAttributes,Type,Type[])
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: DefineMethod(String, MethodAttributes, Type, Type[])
  nameWithType: TypeBuilder.DefineMethod(String, MethodAttributes, Type, Type[])
  fullName: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String, MethodAttributes, Type, Type[])
  type: Method
  source:
    id: DefineMethod
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 217
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public MethodBuilder DefineMethod(string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes)
    parameters:
    - id: name
      type: System.String
    - id: attributes
      type: MethodAttributes
    - id: returnType
      type: Type
    - id: parameterTypes
      type: Type[]
    return:
      type: System.Reflection.Emit.MethodBuilder
    content.vb: Public Function DefineMethod(name As String, attributes As MethodAttributes, returnType As Type, parameterTypes As Type()) As MethodBuilder
  overload: System.Reflection.Emit.TypeBuilder.DefineMethod*
  nameWithType.vb: TypeBuilder.DefineMethod(String, MethodAttributes, Type, Type())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String, MethodAttributes, Type, Type())
  name.vb: DefineMethod(String, MethodAttributes, Type, Type())
- uid: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,MethodAttributes,CallingConventions,Type,Type[])
  commentId: M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,MethodAttributes,CallingConventions,Type,Type[])
  id: DefineMethod(System.String,MethodAttributes,CallingConventions,Type,Type[])
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: DefineMethod(String, MethodAttributes, CallingConventions, Type, Type[])
  nameWithType: TypeBuilder.DefineMethod(String, MethodAttributes, CallingConventions, Type, Type[])
  fullName: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String, MethodAttributes, CallingConventions, Type, Type[])
  type: Method
  source:
    id: DefineMethod
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 224
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)
    parameters:
    - id: name
      type: System.String
    - id: attributes
      type: MethodAttributes
    - id: callingConvention
      type: CallingConventions
    - id: returnType
      type: Type
    - id: parameterTypes
      type: Type[]
    return:
      type: System.Reflection.Emit.MethodBuilder
    content.vb: Public Function DefineMethod(name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type()) As MethodBuilder
  overload: System.Reflection.Emit.TypeBuilder.DefineMethod*
  nameWithType.vb: TypeBuilder.DefineMethod(String, MethodAttributes, CallingConventions, Type, Type())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String, MethodAttributes, CallingConventions, Type, Type())
  name.vb: DefineMethod(String, MethodAttributes, CallingConventions, Type, Type())
- uid: System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(MethodAttributes)
  commentId: M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(MethodAttributes)
  id: DefineDefaultConstructor(MethodAttributes)
  parent: System.Reflection.Emit.TypeBuilder
  langs:
  - csharp
  - vb
  name: DefineDefaultConstructor(MethodAttributes)
  nameWithType: TypeBuilder.DefineDefaultConstructor(MethodAttributes)
  fullName: System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(MethodAttributes)
  type: Method
  source:
    id: DefineDefaultConstructor
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\System.Reflection.Emit\WORKINPROGRESS\TypeBuilder.cs
    startLine: 230
  assemblies:
  - OpenSilver
  namespace: System.Reflection.Emit
  syntax:
    content: public ConstructorBuilder DefineDefaultConstructor(MethodAttributes attributes)
    parameters:
    - id: attributes
      type: MethodAttributes
    return:
      type: System.Reflection.Emit.ConstructorBuilder
    content.vb: Public Function DefineDefaultConstructor(attributes As MethodAttributes) As ConstructorBuilder
  overload: System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Reflection.Emit
  commentId: N:System.Reflection.Emit
  name: System.Reflection.Emit
  nameWithType: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: System.Reflection.Emit.TypeBuilder.Assembly*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.Assembly
  name: Assembly
  nameWithType: TypeBuilder.Assembly
  fullName: System.Reflection.Emit.TypeBuilder.Assembly
- uid: Assembly
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: Assembly
- uid: System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName
  name: AssemblyQualifiedName
  nameWithType: TypeBuilder.AssemblyQualifiedName
  fullName: System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.TypeBuilder.BaseType*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.BaseType
  name: BaseType
  nameWithType: TypeBuilder.BaseType
  fullName: System.Reflection.Emit.TypeBuilder.BaseType
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: System.Reflection.Emit.TypeBuilder.FullName*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.FullName
  name: FullName
  nameWithType: TypeBuilder.FullName
  fullName: System.Reflection.Emit.TypeBuilder.FullName
- uid: System.Reflection.Emit.TypeBuilder.GUID*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.GUID
  name: GUID
  nameWithType: TypeBuilder.GUID
  fullName: System.Reflection.Emit.TypeBuilder.GUID
- uid: Guid
  commentId: '!:Guid'
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: System.Reflection.Emit.TypeBuilder.Module*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.Module
  name: Module
  nameWithType: TypeBuilder.Module
  fullName: System.Reflection.Emit.TypeBuilder.Module
- uid: Module
  isExternal: true
  name: Module
  nameWithType: Module
  fullName: Module
- uid: System.Reflection.Emit.TypeBuilder.Namespace*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.Namespace
  name: Namespace
  nameWithType: TypeBuilder.Namespace
  fullName: System.Reflection.Emit.TypeBuilder.Namespace
- uid: System.Reflection.Emit.TypeBuilder.UnderlyingSystemType*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.UnderlyingSystemType
  name: UnderlyingSystemType
  nameWithType: TypeBuilder.UnderlyingSystemType
  fullName: System.Reflection.Emit.TypeBuilder.UnderlyingSystemType
- uid: System.Reflection.Emit.TypeBuilder.Name*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.Name
  name: Name
  nameWithType: TypeBuilder.Name
  fullName: System.Reflection.Emit.TypeBuilder.Name
- uid: System.Reflection.Emit.TypeBuilder.GetConstructors*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.GetConstructors
  name: GetConstructors
  nameWithType: TypeBuilder.GetConstructors
  fullName: System.Reflection.Emit.TypeBuilder.GetConstructors
- uid: BindingFlags
  isExternal: true
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: BindingFlags
- uid: ConstructorInfo[]
  isExternal: true
  name: ConstructorInfo[]
  nameWithType: ConstructorInfo[]
  fullName: ConstructorInfo[]
  nameWithType.vb: ConstructorInfo()
  fullName.vb: ConstructorInfo()
  name.vb: ConstructorInfo()
  spec.csharp:
  - uid: ConstructorInfo
    name: ConstructorInfo
    nameWithType: ConstructorInfo
    fullName: ConstructorInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: ConstructorInfo
    name: ConstructorInfo
    nameWithType: ConstructorInfo
    fullName: ConstructorInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.Emit.TypeBuilder.GetCustomAttributes*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.GetCustomAttributes
  name: GetCustomAttributes
  nameWithType: TypeBuilder.GetCustomAttributes
  fullName: System.Reflection.Emit.TypeBuilder.GetCustomAttributes
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.Emit.TypeBuilder.GetElementType*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.GetElementType
  name: GetElementType
  nameWithType: TypeBuilder.GetElementType
  fullName: System.Reflection.Emit.TypeBuilder.GetElementType
- uid: System.Reflection.Emit.TypeBuilder.GetEvent*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.GetEvent
  name: GetEvent
  nameWithType: TypeBuilder.GetEvent
  fullName: System.Reflection.Emit.TypeBuilder.GetEvent
- uid: EventInfo
  commentId: '!:EventInfo'
  isExternal: true
  name: EventInfo
  nameWithType: EventInfo
  fullName: EventInfo
- uid: System.Reflection.Emit.TypeBuilder.GetEvents*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.GetEvents
  name: GetEvents
  nameWithType: TypeBuilder.GetEvents
  fullName: System.Reflection.Emit.TypeBuilder.GetEvents
- uid: EventInfo[]
  isExternal: true
  name: EventInfo[]
  nameWithType: EventInfo[]
  fullName: EventInfo[]
  nameWithType.vb: EventInfo()
  fullName.vb: EventInfo()
  name.vb: EventInfo()
  spec.csharp:
  - uid: EventInfo
    name: EventInfo
    nameWithType: EventInfo
    fullName: EventInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: EventInfo
    name: EventInfo
    nameWithType: EventInfo
    fullName: EventInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.Emit.TypeBuilder.GetField*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.GetField
  name: GetField
  nameWithType: TypeBuilder.GetField
  fullName: System.Reflection.Emit.TypeBuilder.GetField
- uid: FieldInfo
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: FieldInfo
- uid: System.Reflection.Emit.TypeBuilder.GetFields*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.GetFields
  name: GetFields
  nameWithType: TypeBuilder.GetFields
  fullName: System.Reflection.Emit.TypeBuilder.GetFields
- uid: FieldInfo[]
  isExternal: true
  name: FieldInfo[]
  nameWithType: FieldInfo[]
  fullName: FieldInfo[]
  nameWithType.vb: FieldInfo()
  fullName.vb: FieldInfo()
  name.vb: FieldInfo()
  spec.csharp:
  - uid: FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: FieldInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: FieldInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.Emit.TypeBuilder.GetInterface*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.GetInterface
  name: GetInterface
  nameWithType: TypeBuilder.GetInterface
  fullName: System.Reflection.Emit.TypeBuilder.GetInterface
- uid: System.Reflection.Emit.TypeBuilder.GetInterfaces*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.GetInterfaces
  name: GetInterfaces
  nameWithType: TypeBuilder.GetInterfaces
  fullName: System.Reflection.Emit.TypeBuilder.GetInterfaces
- uid: Type[]
  isExternal: true
  name: Type[]
  nameWithType: Type[]
  fullName: Type[]
  nameWithType.vb: Type()
  fullName.vb: Type()
  name.vb: Type()
  spec.csharp:
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.Emit.TypeBuilder.GetMembers*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.GetMembers
  name: GetMembers
  nameWithType: TypeBuilder.GetMembers
  fullName: System.Reflection.Emit.TypeBuilder.GetMembers
- uid: MemberInfo[]
  isExternal: true
  name: MemberInfo[]
  nameWithType: MemberInfo[]
  fullName: MemberInfo[]
  nameWithType.vb: MemberInfo()
  fullName.vb: MemberInfo()
  name.vb: MemberInfo()
  spec.csharp:
  - uid: MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: MemberInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: MemberInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.Emit.TypeBuilder.GetMethods*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.GetMethods
  name: GetMethods
  nameWithType: TypeBuilder.GetMethods
  fullName: System.Reflection.Emit.TypeBuilder.GetMethods
- uid: MethodInfo[]
  isExternal: true
  name: MethodInfo[]
  nameWithType: MethodInfo[]
  fullName: MethodInfo[]
  nameWithType.vb: MethodInfo()
  fullName.vb: MethodInfo()
  name.vb: MethodInfo()
  spec.csharp:
  - uid: MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: MethodInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: MethodInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.Emit.TypeBuilder.GetNestedType*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.GetNestedType
  name: GetNestedType
  nameWithType: TypeBuilder.GetNestedType
  fullName: System.Reflection.Emit.TypeBuilder.GetNestedType
- uid: System.Reflection.Emit.TypeBuilder.GetNestedTypes*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.GetNestedTypes
  name: GetNestedTypes
  nameWithType: TypeBuilder.GetNestedTypes
  fullName: System.Reflection.Emit.TypeBuilder.GetNestedTypes
- uid: System.Reflection.Emit.TypeBuilder.GetProperties*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.GetProperties
  name: GetProperties
  nameWithType: TypeBuilder.GetProperties
  fullName: System.Reflection.Emit.TypeBuilder.GetProperties
- uid: PropertyInfo[]
  isExternal: true
  name: PropertyInfo[]
  nameWithType: PropertyInfo[]
  fullName: PropertyInfo[]
  nameWithType.vb: PropertyInfo()
  fullName.vb: PropertyInfo()
  name.vb: PropertyInfo()
  spec.csharp:
  - uid: PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.Emit.TypeBuilder.InvokeMember*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.InvokeMember
  name: InvokeMember
  nameWithType: TypeBuilder.InvokeMember
  fullName: System.Reflection.Emit.TypeBuilder.InvokeMember
- uid: Binder
  isExternal: true
  name: Binder
  nameWithType: Binder
  fullName: Binder
- uid: ParameterModifier[]
  isExternal: true
  name: ParameterModifier[]
  nameWithType: ParameterModifier[]
  fullName: ParameterModifier[]
  nameWithType.vb: ParameterModifier()
  fullName.vb: ParameterModifier()
  name.vb: ParameterModifier()
  spec.csharp:
  - uid: ParameterModifier
    name: ParameterModifier
    nameWithType: ParameterModifier
    fullName: ParameterModifier
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: ParameterModifier
    name: ParameterModifier
    nameWithType: ParameterModifier
    fullName: ParameterModifier
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: CultureInfo
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: CultureInfo
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.Emit.TypeBuilder.IsDefined*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.IsDefined
  name: IsDefined
  nameWithType: TypeBuilder.IsDefined
  fullName: System.Reflection.Emit.TypeBuilder.IsDefined
- uid: System.Reflection.Emit.TypeBuilder.GetAttributeFlagsImpl*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.GetAttributeFlagsImpl
  name: GetAttributeFlagsImpl
  nameWithType: TypeBuilder.GetAttributeFlagsImpl
  fullName: System.Reflection.Emit.TypeBuilder.GetAttributeFlagsImpl
- uid: TypeAttributes
  isExternal: true
  name: TypeAttributes
  nameWithType: TypeAttributes
  fullName: TypeAttributes
- uid: System.Reflection.Emit.TypeBuilder.GetConstructorImpl*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.GetConstructorImpl
  name: GetConstructorImpl
  nameWithType: TypeBuilder.GetConstructorImpl
  fullName: System.Reflection.Emit.TypeBuilder.GetConstructorImpl
- uid: CallingConventions
  isExternal: true
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: CallingConventions
- uid: ConstructorInfo
  isExternal: true
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: ConstructorInfo
- uid: System.Reflection.Emit.TypeBuilder.GetMethodImpl*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.GetMethodImpl
  name: GetMethodImpl
  nameWithType: TypeBuilder.GetMethodImpl
  fullName: System.Reflection.Emit.TypeBuilder.GetMethodImpl
- uid: MethodInfo
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: MethodInfo
- uid: System.Reflection.Emit.TypeBuilder.GetPropertyImpl*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.GetPropertyImpl
  name: GetPropertyImpl
  nameWithType: TypeBuilder.GetPropertyImpl
  fullName: System.Reflection.Emit.TypeBuilder.GetPropertyImpl
- uid: PropertyInfo
  commentId: '!:PropertyInfo'
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: PropertyInfo
- uid: System.Reflection.Emit.TypeBuilder.HasElementTypeImpl*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.HasElementTypeImpl
  name: HasElementTypeImpl
  nameWithType: TypeBuilder.HasElementTypeImpl
  fullName: System.Reflection.Emit.TypeBuilder.HasElementTypeImpl
- uid: System.Reflection.Emit.TypeBuilder.IsArrayImpl*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.IsArrayImpl
  name: IsArrayImpl
  nameWithType: TypeBuilder.IsArrayImpl
  fullName: System.Reflection.Emit.TypeBuilder.IsArrayImpl
- uid: System.Reflection.Emit.TypeBuilder.IsByRefImpl*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.IsByRefImpl
  name: IsByRefImpl
  nameWithType: TypeBuilder.IsByRefImpl
  fullName: System.Reflection.Emit.TypeBuilder.IsByRefImpl
- uid: System.Reflection.Emit.TypeBuilder.IsCOMObjectImpl*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.IsCOMObjectImpl
  name: IsCOMObjectImpl
  nameWithType: TypeBuilder.IsCOMObjectImpl
  fullName: System.Reflection.Emit.TypeBuilder.IsCOMObjectImpl
- uid: System.Reflection.Emit.TypeBuilder.IsPointerImpl*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.IsPointerImpl
  name: IsPointerImpl
  nameWithType: TypeBuilder.IsPointerImpl
  fullName: System.Reflection.Emit.TypeBuilder.IsPointerImpl
- uid: System.Reflection.Emit.TypeBuilder.IsPrimitiveImpl*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.IsPrimitiveImpl
  name: IsPrimitiveImpl
  nameWithType: TypeBuilder.IsPrimitiveImpl
  fullName: System.Reflection.Emit.TypeBuilder.IsPrimitiveImpl
- uid: System.Reflection.Emit.TypeBuilder.CreateType*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.CreateType
  name: CreateType
  nameWithType: TypeBuilder.CreateType
  fullName: System.Reflection.Emit.TypeBuilder.CreateType
- uid: System.Reflection.Emit.TypeBuilder.DefineField*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.DefineField
  name: DefineField
  nameWithType: TypeBuilder.DefineField
  fullName: System.Reflection.Emit.TypeBuilder.DefineField
- uid: FieldAttributes
  isExternal: true
  name: FieldAttributes
  nameWithType: FieldAttributes
  fullName: FieldAttributes
- uid: System.Reflection.Emit.FieldBuilder
  commentId: T:System.Reflection.Emit.FieldBuilder
  parent: System.Reflection.Emit
  name: FieldBuilder
  nameWithType: FieldBuilder
  fullName: System.Reflection.Emit.FieldBuilder
- uid: System.Reflection.Emit.TypeBuilder.DefineProperty*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.DefineProperty
  name: DefineProperty
  nameWithType: TypeBuilder.DefineProperty
  fullName: System.Reflection.Emit.TypeBuilder.DefineProperty
- uid: PropertyAttributes
  isExternal: true
  name: PropertyAttributes
  nameWithType: PropertyAttributes
  fullName: PropertyAttributes
- uid: System.Reflection.Emit.PropertyBuilder
  commentId: T:System.Reflection.Emit.PropertyBuilder
  parent: System.Reflection.Emit
  name: PropertyBuilder
  nameWithType: PropertyBuilder
  fullName: System.Reflection.Emit.PropertyBuilder
- uid: System.Reflection.Emit.TypeBuilder.DefineMethod*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.DefineMethod
  name: DefineMethod
  nameWithType: TypeBuilder.DefineMethod
  fullName: System.Reflection.Emit.TypeBuilder.DefineMethod
- uid: MethodAttributes
  isExternal: true
  name: MethodAttributes
  nameWithType: MethodAttributes
  fullName: MethodAttributes
- uid: System.Reflection.Emit.MethodBuilder
  commentId: T:System.Reflection.Emit.MethodBuilder
  parent: System.Reflection.Emit
  name: MethodBuilder
  nameWithType: MethodBuilder
  fullName: System.Reflection.Emit.MethodBuilder
- uid: System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor*
  commentId: Overload:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor
  name: DefineDefaultConstructor
  nameWithType: TypeBuilder.DefineDefaultConstructor
  fullName: System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor
- uid: System.Reflection.Emit.ConstructorBuilder
  commentId: T:System.Reflection.Emit.ConstructorBuilder
  parent: System.Reflection.Emit
  name: ConstructorBuilder
  nameWithType: ConstructorBuilder
  fullName: System.Reflection.Emit.ConstructorBuilder
