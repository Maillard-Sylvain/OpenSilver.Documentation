### YamlMime:ManagedReference
items:
- uid: TypeScriptDefinitionsSupport.JSArray`1
  commentId: T:TypeScriptDefinitionsSupport.JSArray`1
  id: JSArray`1
  parent: TypeScriptDefinitionsSupport
  children:
  - TypeScriptDefinitionsSupport.JSArray`1.#ctor
  - TypeScriptDefinitionsSupport.JSArray`1.#ctor(System.Object)
  - TypeScriptDefinitionsSupport.JSArray`1.Add(`0)
  - TypeScriptDefinitionsSupport.JSArray`1.Clear
  - TypeScriptDefinitionsSupport.JSArray`1.Contains(`0)
  - TypeScriptDefinitionsSupport.JSArray`1.CopyTo(`0[],System.Int32)
  - TypeScriptDefinitionsSupport.JSArray`1.Count
  - TypeScriptDefinitionsSupport.JSArray`1.FromJavaScriptInstance(System.Object)
  - TypeScriptDefinitionsSupport.JSArray`1.GetEnumerator
  - TypeScriptDefinitionsSupport.JSArray`1.IndexOf(`0)
  - TypeScriptDefinitionsSupport.JSArray`1.Insert(System.Int32,`0)
  - TypeScriptDefinitionsSupport.JSArray`1.IsReadOnly
  - TypeScriptDefinitionsSupport.JSArray`1.Item(System.Int32)
  - TypeScriptDefinitionsSupport.JSArray`1.Remove(`0)
  - TypeScriptDefinitionsSupport.JSArray`1.RemoveAt(System.Int32)
  langs:
  - csharp
  - vb
  name: JSArray<T>
  nameWithType: JSArray<T>
  fullName: TypeScriptDefinitionsSupport.JSArray<T>
  type: Class
  source:
    id: JSArray
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\TypeScriptDefinitionsSupportFiles\JSArray_1.cs
    startLine: 25
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: 'public class JSArray<T> : JSObject, IJSObject, IList<T>'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class JSArray(Of T)
          Inherits JSObject
          Implements IJSObject, IList(Of T)
  inheritance:
  - System.Object
  - TypeScriptDefinitionsSupport.JSObject
  implements:
  - TypeScriptDefinitionsSupport.IJSObject
  - IList{{T}}
  inheritedMembers:
  - TypeScriptDefinitionsSupport.JSObject.Undefined
  - TypeScriptDefinitionsSupport.JSObject.Null
  - TypeScriptDefinitionsSupport.JSObject.UnderlyingJSInstance
  - TypeScriptDefinitionsSupport.JSObject.FromJavaScriptInstance``1(System.Object)
  - TypeScriptDefinitionsSupport.JSObject.CreateFrom(System.Object)
  - TypeScriptDefinitionsSupport.JSObject.Equals(System.Object)
  - TypeScriptDefinitionsSupport.JSObject.Helper_IsBuiltInType``1
  - TypeScriptDefinitionsSupport.JSObject.Helper_ConvertTo``1(System.Object)
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  nameWithType.vb: JSArray(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T)
  name.vb: JSArray(Of T)
- uid: TypeScriptDefinitionsSupport.JSArray`1.Count
  commentId: P:TypeScriptDefinitionsSupport.JSArray`1.Count
  id: Count
  parent: TypeScriptDefinitionsSupport.JSArray`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: JSArray<T>.Count
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.Count
  type: Property
  source:
    id: Count
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\TypeScriptDefinitionsSupportFiles\JSArray_1.cs
    startLine: 27
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: TypeScriptDefinitionsSupport.JSArray`1.Count*
  nameWithType.vb: JSArray(Of T).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).Count
- uid: TypeScriptDefinitionsSupport.JSArray`1.IsReadOnly
  commentId: P:TypeScriptDefinitionsSupport.JSArray`1.IsReadOnly
  id: IsReadOnly
  parent: TypeScriptDefinitionsSupport.JSArray`1
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: JSArray<T>.IsReadOnly
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.IsReadOnly
  type: Property
  source:
    id: IsReadOnly
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\TypeScriptDefinitionsSupportFiles\JSArray_1.cs
    startLine: 35
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: TypeScriptDefinitionsSupport.JSArray`1.IsReadOnly*
  nameWithType.vb: JSArray(Of T).IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).IsReadOnly
- uid: TypeScriptDefinitionsSupport.JSArray`1.Item(System.Int32)
  commentId: P:TypeScriptDefinitionsSupport.JSArray`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: TypeScriptDefinitionsSupport.JSArray`1
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: JSArray<T>.Item[Int32]
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.Item[System.Int32]
  type: Property
  source:
    id: this[]
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\TypeScriptDefinitionsSupportFiles\JSArray_1.cs
    startLine: 37
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: public T this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: '{T}'
    content.vb: Public Property Item(index As Integer) As T
  overload: TypeScriptDefinitionsSupport.JSArray`1.Item*
  nameWithType.vb: JSArray(Of T).Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).Item(System.Int32)
  name.vb: Item(Int32)
- uid: TypeScriptDefinitionsSupport.JSArray`1.Add(`0)
  commentId: M:TypeScriptDefinitionsSupport.JSArray`1.Add(`0)
  id: Add(`0)
  parent: TypeScriptDefinitionsSupport.JSArray`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: JSArray<T>.Add(T)
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.Add(T)
  type: Method
  source:
    id: Add
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\TypeScriptDefinitionsSupportFiles\JSArray_1.cs
    startLine: 86
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: public void Add(T item)
    parameters:
    - id: item
      type: '{T}'
    content.vb: Public Sub Add(item As T)
  overload: TypeScriptDefinitionsSupport.JSArray`1.Add*
  nameWithType.vb: JSArray(Of T).Add(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).Add(T)
- uid: TypeScriptDefinitionsSupport.JSArray`1.Clear
  commentId: M:TypeScriptDefinitionsSupport.JSArray`1.Clear
  id: Clear
  parent: TypeScriptDefinitionsSupport.JSArray`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: JSArray<T>.Clear()
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.Clear()
  type: Method
  source:
    id: Clear
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\TypeScriptDefinitionsSupportFiles\JSArray_1.cs
    startLine: 108
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: TypeScriptDefinitionsSupport.JSArray`1.Clear*
  nameWithType.vb: JSArray(Of T).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).Clear()
- uid: TypeScriptDefinitionsSupport.JSArray`1.Contains(`0)
  commentId: M:TypeScriptDefinitionsSupport.JSArray`1.Contains(`0)
  id: Contains(`0)
  parent: TypeScriptDefinitionsSupport.JSArray`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: JSArray<T>.Contains(T)
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.Contains(T)
  type: Method
  source:
    id: Contains
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\TypeScriptDefinitionsSupportFiles\JSArray_1.cs
    startLine: 113
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: public bool Contains(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function Contains(item As T) As Boolean
  overload: TypeScriptDefinitionsSupport.JSArray`1.Contains*
  nameWithType.vb: JSArray(Of T).Contains(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).Contains(T)
- uid: TypeScriptDefinitionsSupport.JSArray`1.CopyTo(`0[],System.Int32)
  commentId: M:TypeScriptDefinitionsSupport.JSArray`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: TypeScriptDefinitionsSupport.JSArray`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  nameWithType: JSArray<T>.CopyTo(T[], Int32)
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    id: CopyTo
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\TypeScriptDefinitionsSupportFiles\JSArray_1.cs
    startLine: 138
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex)
    parameters:
    - id: array
      type: '{T}[]'
    - id: arrayIndex
      type: System.Int32
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer)
  overload: TypeScriptDefinitionsSupport.JSArray`1.CopyTo*
  nameWithType.vb: JSArray(Of T).CopyTo(T(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: TypeScriptDefinitionsSupport.JSArray`1.GetEnumerator
  commentId: M:TypeScriptDefinitionsSupport.JSArray`1.GetEnumerator
  id: GetEnumerator
  parent: TypeScriptDefinitionsSupport.JSArray`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: JSArray<T>.GetEnumerator()
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.GetEnumerator()
  type: Method
  source:
    id: GetEnumerator
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\TypeScriptDefinitionsSupportFiles\JSArray_1.cs
    startLine: 153
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: public IEnumerator<T> GetEnumerator()
    return:
      type: IEnumerator{{T}}
    content.vb: Public Function GetEnumerator As IEnumerator(Of T)
  overload: TypeScriptDefinitionsSupport.JSArray`1.GetEnumerator*
  nameWithType.vb: JSArray(Of T).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).GetEnumerator()
- uid: TypeScriptDefinitionsSupport.JSArray`1.IndexOf(`0)
  commentId: M:TypeScriptDefinitionsSupport.JSArray`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: TypeScriptDefinitionsSupport.JSArray`1
  langs:
  - csharp
  - vb
  name: IndexOf(T)
  nameWithType: JSArray<T>.IndexOf(T)
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.IndexOf(T)
  type: Method
  source:
    id: IndexOf
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\TypeScriptDefinitionsSupportFiles\JSArray_1.cs
    startLine: 187
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: public int IndexOf(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Int32
    content.vb: Public Function IndexOf(item As T) As Integer
  overload: TypeScriptDefinitionsSupport.JSArray`1.IndexOf*
  nameWithType.vb: JSArray(Of T).IndexOf(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).IndexOf(T)
- uid: TypeScriptDefinitionsSupport.JSArray`1.Insert(System.Int32,`0)
  commentId: M:TypeScriptDefinitionsSupport.JSArray`1.Insert(System.Int32,`0)
  id: Insert(System.Int32,`0)
  parent: TypeScriptDefinitionsSupport.JSArray`1
  langs:
  - csharp
  - vb
  name: Insert(Int32, T)
  nameWithType: JSArray<T>.Insert(Int32, T)
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.Insert(System.Int32, T)
  type: Method
  source:
    id: Insert
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\TypeScriptDefinitionsSupportFiles\JSArray_1.cs
    startLine: 209
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: public void Insert(int index, T item)
    parameters:
    - id: index
      type: System.Int32
    - id: item
      type: '{T}'
    content.vb: Public Sub Insert(index As Integer, item As T)
  overload: TypeScriptDefinitionsSupport.JSArray`1.Insert*
  nameWithType.vb: JSArray(Of T).Insert(Int32, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).Insert(System.Int32, T)
- uid: TypeScriptDefinitionsSupport.JSArray`1.Remove(`0)
  commentId: M:TypeScriptDefinitionsSupport.JSArray`1.Remove(`0)
  id: Remove(`0)
  parent: TypeScriptDefinitionsSupport.JSArray`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  nameWithType: JSArray<T>.Remove(T)
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.Remove(T)
  type: Method
  source:
    id: Remove
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\TypeScriptDefinitionsSupportFiles\JSArray_1.cs
    startLine: 241
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: public bool Remove(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function Remove(item As T) As Boolean
  overload: TypeScriptDefinitionsSupport.JSArray`1.Remove*
  nameWithType.vb: JSArray(Of T).Remove(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).Remove(T)
- uid: TypeScriptDefinitionsSupport.JSArray`1.RemoveAt(System.Int32)
  commentId: M:TypeScriptDefinitionsSupport.JSArray`1.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: TypeScriptDefinitionsSupport.JSArray`1
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: JSArray<T>.RemoveAt(Int32)
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.RemoveAt(System.Int32)
  type: Method
  source:
    id: RemoveAt
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\TypeScriptDefinitionsSupportFiles\JSArray_1.cs
    startLine: 268
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: public void RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
    content.vb: Public Sub RemoveAt(index As Integer)
  overload: TypeScriptDefinitionsSupport.JSArray`1.RemoveAt*
  nameWithType.vb: JSArray(Of T).RemoveAt(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).RemoveAt(System.Int32)
- uid: TypeScriptDefinitionsSupport.JSArray`1.#ctor
  commentId: M:TypeScriptDefinitionsSupport.JSArray`1.#ctor
  id: '#ctor'
  parent: TypeScriptDefinitionsSupport.JSArray`1
  langs:
  - csharp
  - vb
  name: JSArray()
  nameWithType: JSArray<T>.JSArray()
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.JSArray()
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\TypeScriptDefinitionsSupportFiles\JSArray_1.cs
    startLine: 276
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: public JSArray()
    content.vb: Public Sub New
  overload: TypeScriptDefinitionsSupport.JSArray`1.#ctor*
  nameWithType.vb: JSArray(Of T).JSArray()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).JSArray()
- uid: TypeScriptDefinitionsSupport.JSArray`1.#ctor(System.Object)
  commentId: M:TypeScriptDefinitionsSupport.JSArray`1.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: TypeScriptDefinitionsSupport.JSArray`1
  langs:
  - csharp
  - vb
  name: JSArray(Object)
  nameWithType: JSArray<T>.JSArray(Object)
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.JSArray(System.Object)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\TypeScriptDefinitionsSupportFiles\JSArray_1.cs
    startLine: 281
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: public JSArray(object jsObj)
    parameters:
    - id: jsObj
      type: System.Object
    content.vb: Public Sub New(jsObj As Object)
  overload: TypeScriptDefinitionsSupport.JSArray`1.#ctor*
  nameWithType.vb: JSArray(Of T).JSArray(Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).JSArray(System.Object)
- uid: TypeScriptDefinitionsSupport.JSArray`1.FromJavaScriptInstance(System.Object)
  commentId: M:TypeScriptDefinitionsSupport.JSArray`1.FromJavaScriptInstance(System.Object)
  id: FromJavaScriptInstance(System.Object)
  parent: TypeScriptDefinitionsSupport.JSArray`1
  langs:
  - csharp
  - vb
  name: FromJavaScriptInstance(Object)
  nameWithType: JSArray<T>.FromJavaScriptInstance(Object)
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.FromJavaScriptInstance(System.Object)
  type: Method
  source:
    id: FromJavaScriptInstance
    path: C:\Users\ashot\Desktop\Projects\GitHub-OpenSilver\src\Runtime\Runtime\TypeScriptDefinitionsSupportFiles\JSArray_1.cs
    startLine: 286
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: public static JSArray<T> FromJavaScriptInstance(object jsObj)
    parameters:
    - id: jsObj
      type: System.Object
    return:
      type: TypeScriptDefinitionsSupport.JSArray`1
    content.vb: Public Shared Function FromJavaScriptInstance(jsObj As Object) As JSArray(Of T)
  overload: TypeScriptDefinitionsSupport.JSArray`1.FromJavaScriptInstance*
  nameWithType.vb: JSArray(Of T).FromJavaScriptInstance(Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).FromJavaScriptInstance(System.Object)
references:
- uid: TypeScriptDefinitionsSupport
  commentId: N:TypeScriptDefinitionsSupport
  name: TypeScriptDefinitionsSupport
  nameWithType: TypeScriptDefinitionsSupport
  fullName: TypeScriptDefinitionsSupport
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TypeScriptDefinitionsSupport.JSObject
  commentId: T:TypeScriptDefinitionsSupport.JSObject
  parent: TypeScriptDefinitionsSupport
  name: JSObject
  nameWithType: JSObject
  fullName: TypeScriptDefinitionsSupport.JSObject
- uid: TypeScriptDefinitionsSupport.IJSObject
  commentId: T:TypeScriptDefinitionsSupport.IJSObject
  parent: TypeScriptDefinitionsSupport
  name: IJSObject
  nameWithType: IJSObject
  fullName: TypeScriptDefinitionsSupport.IJSObject
- uid: IList{{T}}
  commentId: '!:IList{`0}'
  definition: IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefinitionsSupport.JSObject.Undefined
  commentId: F:TypeScriptDefinitionsSupport.JSObject.Undefined
  parent: TypeScriptDefinitionsSupport.JSObject
  name: Undefined
  nameWithType: JSObject.Undefined
  fullName: TypeScriptDefinitionsSupport.JSObject.Undefined
- uid: TypeScriptDefinitionsSupport.JSObject.Null
  commentId: F:TypeScriptDefinitionsSupport.JSObject.Null
  parent: TypeScriptDefinitionsSupport.JSObject
  name: "Null"
  nameWithType: JSObject.Null
  fullName: TypeScriptDefinitionsSupport.JSObject.Null
- uid: TypeScriptDefinitionsSupport.JSObject.UnderlyingJSInstance
  commentId: P:TypeScriptDefinitionsSupport.JSObject.UnderlyingJSInstance
  parent: TypeScriptDefinitionsSupport.JSObject
  name: UnderlyingJSInstance
  nameWithType: JSObject.UnderlyingJSInstance
  fullName: TypeScriptDefinitionsSupport.JSObject.UnderlyingJSInstance
- uid: TypeScriptDefinitionsSupport.JSObject.FromJavaScriptInstance``1(System.Object)
  commentId: M:TypeScriptDefinitionsSupport.JSObject.FromJavaScriptInstance``1(System.Object)
  parent: TypeScriptDefinitionsSupport.JSObject
  isExternal: true
  name: FromJavaScriptInstance<T>(Object)
  nameWithType: JSObject.FromJavaScriptInstance<T>(Object)
  fullName: TypeScriptDefinitionsSupport.JSObject.FromJavaScriptInstance<T>(System.Object)
  nameWithType.vb: JSObject.FromJavaScriptInstance(Of T)(Object)
  fullName.vb: TypeScriptDefinitionsSupport.JSObject.FromJavaScriptInstance(Of T)(System.Object)
  name.vb: FromJavaScriptInstance(Of T)(Object)
  spec.csharp:
  - uid: TypeScriptDefinitionsSupport.JSObject.FromJavaScriptInstance``1(System.Object)
    name: FromJavaScriptInstance<T>
    nameWithType: JSObject.FromJavaScriptInstance<T>
    fullName: TypeScriptDefinitionsSupport.JSObject.FromJavaScriptInstance<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefinitionsSupport.JSObject.FromJavaScriptInstance``1(System.Object)
    name: FromJavaScriptInstance(Of T)
    nameWithType: JSObject.FromJavaScriptInstance(Of T)
    fullName: TypeScriptDefinitionsSupport.JSObject.FromJavaScriptInstance(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefinitionsSupport.JSObject.CreateFrom(System.Object)
  commentId: M:TypeScriptDefinitionsSupport.JSObject.CreateFrom(System.Object)
  parent: TypeScriptDefinitionsSupport.JSObject
  isExternal: true
  name: CreateFrom(Object)
  nameWithType: JSObject.CreateFrom(Object)
  fullName: TypeScriptDefinitionsSupport.JSObject.CreateFrom(System.Object)
  spec.csharp:
  - uid: TypeScriptDefinitionsSupport.JSObject.CreateFrom(System.Object)
    name: CreateFrom
    nameWithType: JSObject.CreateFrom
    fullName: TypeScriptDefinitionsSupport.JSObject.CreateFrom
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefinitionsSupport.JSObject.CreateFrom(System.Object)
    name: CreateFrom
    nameWithType: JSObject.CreateFrom
    fullName: TypeScriptDefinitionsSupport.JSObject.CreateFrom
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefinitionsSupport.JSObject.Equals(System.Object)
  commentId: M:TypeScriptDefinitionsSupport.JSObject.Equals(System.Object)
  parent: TypeScriptDefinitionsSupport.JSObject
  isExternal: true
  name: Equals(Object)
  nameWithType: JSObject.Equals(Object)
  fullName: TypeScriptDefinitionsSupport.JSObject.Equals(System.Object)
  spec.csharp:
  - uid: TypeScriptDefinitionsSupport.JSObject.Equals(System.Object)
    name: Equals
    nameWithType: JSObject.Equals
    fullName: TypeScriptDefinitionsSupport.JSObject.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefinitionsSupport.JSObject.Equals(System.Object)
    name: Equals
    nameWithType: JSObject.Equals
    fullName: TypeScriptDefinitionsSupport.JSObject.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefinitionsSupport.JSObject.Helper_IsBuiltInType``1
  commentId: M:TypeScriptDefinitionsSupport.JSObject.Helper_IsBuiltInType``1
  parent: TypeScriptDefinitionsSupport.JSObject
  name: Helper_IsBuiltInType<T>()
  nameWithType: JSObject.Helper_IsBuiltInType<T>()
  fullName: TypeScriptDefinitionsSupport.JSObject.Helper_IsBuiltInType<T>()
  nameWithType.vb: JSObject.Helper_IsBuiltInType(Of T)()
  fullName.vb: TypeScriptDefinitionsSupport.JSObject.Helper_IsBuiltInType(Of T)()
  name.vb: Helper_IsBuiltInType(Of T)()
  spec.csharp:
  - uid: TypeScriptDefinitionsSupport.JSObject.Helper_IsBuiltInType``1
    name: Helper_IsBuiltInType<T>
    nameWithType: JSObject.Helper_IsBuiltInType<T>
    fullName: TypeScriptDefinitionsSupport.JSObject.Helper_IsBuiltInType<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefinitionsSupport.JSObject.Helper_IsBuiltInType``1
    name: Helper_IsBuiltInType(Of T)
    nameWithType: JSObject.Helper_IsBuiltInType(Of T)
    fullName: TypeScriptDefinitionsSupport.JSObject.Helper_IsBuiltInType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefinitionsSupport.JSObject.Helper_ConvertTo``1(System.Object)
  commentId: M:TypeScriptDefinitionsSupport.JSObject.Helper_ConvertTo``1(System.Object)
  parent: TypeScriptDefinitionsSupport.JSObject
  isExternal: true
  name: Helper_ConvertTo<T>(Object)
  nameWithType: JSObject.Helper_ConvertTo<T>(Object)
  fullName: TypeScriptDefinitionsSupport.JSObject.Helper_ConvertTo<T>(System.Object)
  nameWithType.vb: JSObject.Helper_ConvertTo(Of T)(Object)
  fullName.vb: TypeScriptDefinitionsSupport.JSObject.Helper_ConvertTo(Of T)(System.Object)
  name.vb: Helper_ConvertTo(Of T)(Object)
  spec.csharp:
  - uid: TypeScriptDefinitionsSupport.JSObject.Helper_ConvertTo``1(System.Object)
    name: Helper_ConvertTo<T>
    nameWithType: JSObject.Helper_ConvertTo<T>
    fullName: TypeScriptDefinitionsSupport.JSObject.Helper_ConvertTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefinitionsSupport.JSObject.Helper_ConvertTo``1(System.Object)
    name: Helper_ConvertTo(Of T)
    nameWithType: JSObject.Helper_ConvertTo(Of T)
    fullName: TypeScriptDefinitionsSupport.JSObject.Helper_ConvertTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: IList`1
  isExternal: true
  name: IList<>
  nameWithType: IList<>
  fullName: IList<>
  nameWithType.vb: IList(Of )
  fullName.vb: IList(Of )
  name.vb: IList(Of )
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: TypeScriptDefinitionsSupport.JSArray`1.Count*
  commentId: Overload:TypeScriptDefinitionsSupport.JSArray`1.Count
  name: Count
  nameWithType: JSArray<T>.Count
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.Count
  nameWithType.vb: JSArray(Of T).Count
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).Count
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TypeScriptDefinitionsSupport.JSArray`1.IsReadOnly*
  commentId: Overload:TypeScriptDefinitionsSupport.JSArray`1.IsReadOnly
  name: IsReadOnly
  nameWithType: JSArray<T>.IsReadOnly
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.IsReadOnly
  nameWithType.vb: JSArray(Of T).IsReadOnly
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).IsReadOnly
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TypeScriptDefinitionsSupport.JSArray`1.Item*
  commentId: Overload:TypeScriptDefinitionsSupport.JSArray`1.Item
  name: Item
  nameWithType: JSArray<T>.Item
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.Item
  nameWithType.vb: JSArray(Of T).Item
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).Item
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TypeScriptDefinitionsSupport.JSArray`1.Add*
  commentId: Overload:TypeScriptDefinitionsSupport.JSArray`1.Add
  name: Add
  nameWithType: JSArray<T>.Add
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.Add
  nameWithType.vb: JSArray(Of T).Add
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).Add
- uid: TypeScriptDefinitionsSupport.JSArray`1.Clear*
  commentId: Overload:TypeScriptDefinitionsSupport.JSArray`1.Clear
  name: Clear
  nameWithType: JSArray<T>.Clear
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.Clear
  nameWithType.vb: JSArray(Of T).Clear
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).Clear
- uid: TypeScriptDefinitionsSupport.JSArray`1.Contains*
  commentId: Overload:TypeScriptDefinitionsSupport.JSArray`1.Contains
  name: Contains
  nameWithType: JSArray<T>.Contains
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.Contains
  nameWithType.vb: JSArray(Of T).Contains
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).Contains
- uid: TypeScriptDefinitionsSupport.JSArray`1.CopyTo*
  commentId: Overload:TypeScriptDefinitionsSupport.JSArray`1.CopyTo
  name: CopyTo
  nameWithType: JSArray<T>.CopyTo
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.CopyTo
  nameWithType.vb: JSArray(Of T).CopyTo
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).CopyTo
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TypeScriptDefinitionsSupport.JSArray`1.GetEnumerator*
  commentId: Overload:TypeScriptDefinitionsSupport.JSArray`1.GetEnumerator
  name: GetEnumerator
  nameWithType: JSArray<T>.GetEnumerator
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.GetEnumerator
  nameWithType.vb: JSArray(Of T).GetEnumerator
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).GetEnumerator
- uid: IEnumerator{{T}}
  commentId: '!:IEnumerator{`0}'
  definition: IEnumerator`1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerator`1
  isExternal: true
  name: IEnumerator<>
  nameWithType: IEnumerator<>
  fullName: IEnumerator<>
  nameWithType.vb: IEnumerator(Of )
  fullName.vb: IEnumerator(Of )
  name.vb: IEnumerator(Of )
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefinitionsSupport.JSArray`1.IndexOf*
  commentId: Overload:TypeScriptDefinitionsSupport.JSArray`1.IndexOf
  name: IndexOf
  nameWithType: JSArray<T>.IndexOf
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.IndexOf
  nameWithType.vb: JSArray(Of T).IndexOf
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).IndexOf
- uid: TypeScriptDefinitionsSupport.JSArray`1.Insert*
  commentId: Overload:TypeScriptDefinitionsSupport.JSArray`1.Insert
  name: Insert
  nameWithType: JSArray<T>.Insert
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.Insert
  nameWithType.vb: JSArray(Of T).Insert
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).Insert
- uid: TypeScriptDefinitionsSupport.JSArray`1.Remove*
  commentId: Overload:TypeScriptDefinitionsSupport.JSArray`1.Remove
  name: Remove
  nameWithType: JSArray<T>.Remove
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.Remove
  nameWithType.vb: JSArray(Of T).Remove
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).Remove
- uid: TypeScriptDefinitionsSupport.JSArray`1.RemoveAt*
  commentId: Overload:TypeScriptDefinitionsSupport.JSArray`1.RemoveAt
  name: RemoveAt
  nameWithType: JSArray<T>.RemoveAt
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.RemoveAt
  nameWithType.vb: JSArray(Of T).RemoveAt
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).RemoveAt
- uid: TypeScriptDefinitionsSupport.JSArray`1.#ctor*
  commentId: Overload:TypeScriptDefinitionsSupport.JSArray`1.#ctor
  name: JSArray
  nameWithType: JSArray<T>.JSArray
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.JSArray
  nameWithType.vb: JSArray(Of T).JSArray
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).JSArray
- uid: TypeScriptDefinitionsSupport.JSArray`1.FromJavaScriptInstance*
  commentId: Overload:TypeScriptDefinitionsSupport.JSArray`1.FromJavaScriptInstance
  name: FromJavaScriptInstance
  nameWithType: JSArray<T>.FromJavaScriptInstance
  fullName: TypeScriptDefinitionsSupport.JSArray<T>.FromJavaScriptInstance
  nameWithType.vb: JSArray(Of T).FromJavaScriptInstance
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T).FromJavaScriptInstance
- uid: TypeScriptDefinitionsSupport.JSArray`1
  commentId: T:TypeScriptDefinitionsSupport.JSArray`1
  parent: TypeScriptDefinitionsSupport
  name: JSArray<T>
  nameWithType: JSArray<T>
  fullName: TypeScriptDefinitionsSupport.JSArray<T>
  nameWithType.vb: JSArray(Of T)
  fullName.vb: TypeScriptDefinitionsSupport.JSArray(Of T)
  name.vb: JSArray(Of T)
  spec.csharp:
  - uid: TypeScriptDefinitionsSupport.JSArray`1
    name: JSArray
    nameWithType: JSArray
    fullName: TypeScriptDefinitionsSupport.JSArray
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TypeScriptDefinitionsSupport.JSArray`1
    name: JSArray
    nameWithType: JSArray
    fullName: TypeScriptDefinitionsSupport.JSArray
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
